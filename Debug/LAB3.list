
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003188  08003188  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003188  08003188  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003188  08003188  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  08003204  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003204  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5b6  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc3  00000000  00000000  0002a653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017237  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf10  00000000  00000000  00044baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a83  00000000  00000000  00051abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb0  00000000  00000000  000d4598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800314c 	.word	0x0800314c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800314c 	.word	0x0800314c

0800014c <display7SEG>:

#define ENABLE_SEG 0
#define DISABLE_SEG 1

void display7SEG(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48c6      	ldr	r0, [pc, #792]	; (80004ac <display7SEG+0x360>)
 8000192:	f001 ffc6 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48c4      	ldr	r0, [pc, #784]	; (80004ac <display7SEG+0x360>)
 800019c:	f001 ffc1 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48c1      	ldr	r0, [pc, #772]	; (80004ac <display7SEG+0x360>)
 80001a6:	f001 ffbc 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48bf      	ldr	r0, [pc, #764]	; (80004ac <display7SEG+0x360>)
 80001b0:	f001 ffb7 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_ON);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48bc      	ldr	r0, [pc, #752]	; (80004ac <display7SEG+0x360>)
 80001ba:	f001 ffb2 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48ba      	ldr	r0, [pc, #744]	; (80004ac <display7SEG+0x360>)
 80001c4:	f001 ffad 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_OFF);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48b7      	ldr	r0, [pc, #732]	; (80004ac <display7SEG+0x360>)
 80001ce:	f001 ffa8 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 80001d2:	e167      	b.n	80004a4 <display7SEG+0x358>
		case 1:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_OFF);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48b4      	ldr	r0, [pc, #720]	; (80004ac <display7SEG+0x360>)
 80001da:	f001 ffa2 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48b2      	ldr	r0, [pc, #712]	; (80004ac <display7SEG+0x360>)
 80001e4:	f001 ff9d 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	48af      	ldr	r0, [pc, #700]	; (80004ac <display7SEG+0x360>)
 80001ee:	f001 ff98 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_OFF);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	48ad      	ldr	r0, [pc, #692]	; (80004ac <display7SEG+0x360>)
 80001f8:	f001 ff93 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	48aa      	ldr	r0, [pc, #680]	; (80004ac <display7SEG+0x360>)
 8000202:	f001 ff8e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	48a8      	ldr	r0, [pc, #672]	; (80004ac <display7SEG+0x360>)
 800020c:	f001 ff89 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_OFF);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	48a5      	ldr	r0, [pc, #660]	; (80004ac <display7SEG+0x360>)
 8000216:	f001 ff84 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 800021a:	e143      	b.n	80004a4 <display7SEG+0x358>
		case 2:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	48a2      	ldr	r0, [pc, #648]	; (80004ac <display7SEG+0x360>)
 8000222:	f001 ff7e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	48a0      	ldr	r0, [pc, #640]	; (80004ac <display7SEG+0x360>)
 800022c:	f001 ff79 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_OFF);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	489d      	ldr	r0, [pc, #628]	; (80004ac <display7SEG+0x360>)
 8000236:	f001 ff74 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	489b      	ldr	r0, [pc, #620]	; (80004ac <display7SEG+0x360>)
 8000240:	f001 ff6f 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_ON);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4898      	ldr	r0, [pc, #608]	; (80004ac <display7SEG+0x360>)
 800024a:	f001 ff6a 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4896      	ldr	r0, [pc, #600]	; (80004ac <display7SEG+0x360>)
 8000254:	f001 ff65 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4893      	ldr	r0, [pc, #588]	; (80004ac <display7SEG+0x360>)
 800025e:	f001 ff60 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 8000262:	e11f      	b.n	80004a4 <display7SEG+0x358>
		case 3:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	4890      	ldr	r0, [pc, #576]	; (80004ac <display7SEG+0x360>)
 800026a:	f001 ff5a 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	488e      	ldr	r0, [pc, #568]	; (80004ac <display7SEG+0x360>)
 8000274:	f001 ff55 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	488b      	ldr	r0, [pc, #556]	; (80004ac <display7SEG+0x360>)
 800027e:	f001 ff50 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4889      	ldr	r0, [pc, #548]	; (80004ac <display7SEG+0x360>)
 8000288:	f001 ff4b 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4886      	ldr	r0, [pc, #536]	; (80004ac <display7SEG+0x360>)
 8000292:	f001 ff46 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4884      	ldr	r0, [pc, #528]	; (80004ac <display7SEG+0x360>)
 800029c:	f001 ff41 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	4881      	ldr	r0, [pc, #516]	; (80004ac <display7SEG+0x360>)
 80002a6:	f001 ff3c 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 80002aa:	e0fb      	b.n	80004a4 <display7SEG+0x358>
		case 4:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_OFF);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	487e      	ldr	r0, [pc, #504]	; (80004ac <display7SEG+0x360>)
 80002b2:	f001 ff36 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	487c      	ldr	r0, [pc, #496]	; (80004ac <display7SEG+0x360>)
 80002bc:	f001 ff31 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4879      	ldr	r0, [pc, #484]	; (80004ac <display7SEG+0x360>)
 80002c6:	f001 ff2c 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_OFF);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4877      	ldr	r0, [pc, #476]	; (80004ac <display7SEG+0x360>)
 80002d0:	f001 ff27 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4874      	ldr	r0, [pc, #464]	; (80004ac <display7SEG+0x360>)
 80002da:	f001 ff22 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4872      	ldr	r0, [pc, #456]	; (80004ac <display7SEG+0x360>)
 80002e4:	f001 ff1d 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	486f      	ldr	r0, [pc, #444]	; (80004ac <display7SEG+0x360>)
 80002ee:	f001 ff18 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 80002f2:	e0d7      	b.n	80004a4 <display7SEG+0x358>
		case 5:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	486c      	ldr	r0, [pc, #432]	; (80004ac <display7SEG+0x360>)
 80002fa:	f001 ff12 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_OFF);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	486a      	ldr	r0, [pc, #424]	; (80004ac <display7SEG+0x360>)
 8000304:	f001 ff0d 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4867      	ldr	r0, [pc, #412]	; (80004ac <display7SEG+0x360>)
 800030e:	f001 ff08 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4865      	ldr	r0, [pc, #404]	; (80004ac <display7SEG+0x360>)
 8000318:	f001 ff03 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4862      	ldr	r0, [pc, #392]	; (80004ac <display7SEG+0x360>)
 8000322:	f001 fefe 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	4860      	ldr	r0, [pc, #384]	; (80004ac <display7SEG+0x360>)
 800032c:	f001 fef9 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	485d      	ldr	r0, [pc, #372]	; (80004ac <display7SEG+0x360>)
 8000336:	f001 fef4 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 800033a:	e0b3      	b.n	80004a4 <display7SEG+0x358>
		case 6:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	485a      	ldr	r0, [pc, #360]	; (80004ac <display7SEG+0x360>)
 8000342:	f001 feee 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_OFF);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4858      	ldr	r0, [pc, #352]	; (80004ac <display7SEG+0x360>)
 800034c:	f001 fee9 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4855      	ldr	r0, [pc, #340]	; (80004ac <display7SEG+0x360>)
 8000356:	f001 fee4 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4853      	ldr	r0, [pc, #332]	; (80004ac <display7SEG+0x360>)
 8000360:	f001 fedf 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_ON);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4850      	ldr	r0, [pc, #320]	; (80004ac <display7SEG+0x360>)
 800036a:	f001 feda 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	484e      	ldr	r0, [pc, #312]	; (80004ac <display7SEG+0x360>)
 8000374:	f001 fed5 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	484b      	ldr	r0, [pc, #300]	; (80004ac <display7SEG+0x360>)
 800037e:	f001 fed0 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 8000382:	e08f      	b.n	80004a4 <display7SEG+0x358>
		case 7:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4848      	ldr	r0, [pc, #288]	; (80004ac <display7SEG+0x360>)
 800038a:	f001 feca 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4846      	ldr	r0, [pc, #280]	; (80004ac <display7SEG+0x360>)
 8000394:	f001 fec5 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4843      	ldr	r0, [pc, #268]	; (80004ac <display7SEG+0x360>)
 800039e:	f001 fec0 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_OFF);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	4841      	ldr	r0, [pc, #260]	; (80004ac <display7SEG+0x360>)
 80003a8:	f001 febb 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	483e      	ldr	r0, [pc, #248]	; (80004ac <display7SEG+0x360>)
 80003b2:	f001 feb6 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	483c      	ldr	r0, [pc, #240]	; (80004ac <display7SEG+0x360>)
 80003bc:	f001 feb1 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_OFF);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4839      	ldr	r0, [pc, #228]	; (80004ac <display7SEG+0x360>)
 80003c6:	f001 feac 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 80003ca:	e06b      	b.n	80004a4 <display7SEG+0x358>
		case 8:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4836      	ldr	r0, [pc, #216]	; (80004ac <display7SEG+0x360>)
 80003d2:	f001 fea6 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4834      	ldr	r0, [pc, #208]	; (80004ac <display7SEG+0x360>)
 80003dc:	f001 fea1 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	4831      	ldr	r0, [pc, #196]	; (80004ac <display7SEG+0x360>)
 80003e6:	f001 fe9c 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	482f      	ldr	r0, [pc, #188]	; (80004ac <display7SEG+0x360>)
 80003f0:	f001 fe97 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_ON);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	482c      	ldr	r0, [pc, #176]	; (80004ac <display7SEG+0x360>)
 80003fa:	f001 fe92 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	482a      	ldr	r0, [pc, #168]	; (80004ac <display7SEG+0x360>)
 8000404:	f001 fe8d 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4827      	ldr	r0, [pc, #156]	; (80004ac <display7SEG+0x360>)
 800040e:	f001 fe88 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 8000412:	e047      	b.n	80004a4 <display7SEG+0x358>
		case 9:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_ON);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4824      	ldr	r0, [pc, #144]	; (80004ac <display7SEG+0x360>)
 800041a:	f001 fe82 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_ON);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4822      	ldr	r0, [pc, #136]	; (80004ac <display7SEG+0x360>)
 8000424:	f001 fe7d 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_ON);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	481f      	ldr	r0, [pc, #124]	; (80004ac <display7SEG+0x360>)
 800042e:	f001 fe78 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_ON);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	481d      	ldr	r0, [pc, #116]	; (80004ac <display7SEG+0x360>)
 8000438:	f001 fe73 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	481a      	ldr	r0, [pc, #104]	; (80004ac <display7SEG+0x360>)
 8000442:	f001 fe6e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_ON);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4818      	ldr	r0, [pc, #96]	; (80004ac <display7SEG+0x360>)
 800044c:	f001 fe69 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_ON);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4815      	ldr	r0, [pc, #84]	; (80004ac <display7SEG+0x360>)
 8000456:	f001 fe64 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 800045a:	e023      	b.n	80004a4 <display7SEG+0x358>
		default:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, LED_OFF);
 800045c:	2201      	movs	r2, #1
 800045e:	2101      	movs	r1, #1
 8000460:	4812      	ldr	r0, [pc, #72]	; (80004ac <display7SEG+0x360>)
 8000462:	f001 fe5e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, LED_OFF);
 8000466:	2201      	movs	r2, #1
 8000468:	2102      	movs	r1, #2
 800046a:	4810      	ldr	r0, [pc, #64]	; (80004ac <display7SEG+0x360>)
 800046c:	f001 fe59 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, LED_OFF);
 8000470:	2201      	movs	r2, #1
 8000472:	2104      	movs	r1, #4
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <display7SEG+0x360>)
 8000476:	f001 fe54 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, LED_OFF);
 800047a:	2201      	movs	r2, #1
 800047c:	2108      	movs	r1, #8
 800047e:	480b      	ldr	r0, [pc, #44]	; (80004ac <display7SEG+0x360>)
 8000480:	f001 fe4f 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, LED_OFF);
 8000484:	2201      	movs	r2, #1
 8000486:	2110      	movs	r1, #16
 8000488:	4808      	ldr	r0, [pc, #32]	; (80004ac <display7SEG+0x360>)
 800048a:	f001 fe4a 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, LED_OFF);
 800048e:	2201      	movs	r2, #1
 8000490:	2120      	movs	r1, #32
 8000492:	4806      	ldr	r0, [pc, #24]	; (80004ac <display7SEG+0x360>)
 8000494:	f001 fe45 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, LED_OFF);
 8000498:	2201      	movs	r2, #1
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <display7SEG+0x360>)
 800049e:	f001 fe40 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 80004a2:	bf00      	nop
	}
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <display7SEG_2>:
void display7SEG_2(int num)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b09      	cmp	r3, #9
 80004bc:	f200 81be 	bhi.w	800083c <display7SEG_2+0x38c>
 80004c0:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <display7SEG_2+0x18>)
 80004c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c6:	bf00      	nop
 80004c8:	080004f1 	.word	0x080004f1
 80004cc:	08000545 	.word	0x08000545
 80004d0:	08000599 	.word	0x08000599
 80004d4:	080005ed 	.word	0x080005ed
 80004d8:	08000641 	.word	0x08000641
 80004dc:	08000695 	.word	0x08000695
 80004e0:	080006e9 	.word	0x080006e9
 80004e4:	0800073d 	.word	0x0800073d
 80004e8:	08000791 	.word	0x08000791
 80004ec:	080007e5 	.word	0x080007e5
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	48d0      	ldr	r0, [pc, #832]	; (8000838 <display7SEG_2+0x388>)
 80004f6:	f001 fe14 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000500:	48cd      	ldr	r0, [pc, #820]	; (8000838 <display7SEG_2+0x388>)
 8000502:	f001 fe0e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	48ca      	ldr	r0, [pc, #808]	; (8000838 <display7SEG_2+0x388>)
 800050e:	f001 fe08 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000518:	48c7      	ldr	r0, [pc, #796]	; (8000838 <display7SEG_2+0x388>)
 800051a:	f001 fe02 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_ON);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000524:	48c4      	ldr	r0, [pc, #784]	; (8000838 <display7SEG_2+0x388>)
 8000526:	f001 fdfc 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	48c1      	ldr	r0, [pc, #772]	; (8000838 <display7SEG_2+0x388>)
 8000532:	f001 fdf6 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_OFF);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053c:	48be      	ldr	r0, [pc, #760]	; (8000838 <display7SEG_2+0x388>)
 800053e:	f001 fdf0 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 8000542:	e1a5      	b.n	8000890 <display7SEG_2+0x3e0>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_OFF);
 8000544:	2201      	movs	r2, #1
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	48bb      	ldr	r0, [pc, #748]	; (8000838 <display7SEG_2+0x388>)
 800054a:	f001 fdea 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000554:	48b8      	ldr	r0, [pc, #736]	; (8000838 <display7SEG_2+0x388>)
 8000556:	f001 fde4 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000560:	48b5      	ldr	r0, [pc, #724]	; (8000838 <display7SEG_2+0x388>)
 8000562:	f001 fdde 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_OFF);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	48b2      	ldr	r0, [pc, #712]	; (8000838 <display7SEG_2+0x388>)
 800056e:	f001 fdd8 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000578:	48af      	ldr	r0, [pc, #700]	; (8000838 <display7SEG_2+0x388>)
 800057a:	f001 fdd2 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	48ac      	ldr	r0, [pc, #688]	; (8000838 <display7SEG_2+0x388>)
 8000586:	f001 fdcc 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_OFF);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000590:	48a9      	ldr	r0, [pc, #676]	; (8000838 <display7SEG_2+0x388>)
 8000592:	f001 fdc6 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 8000596:	e17b      	b.n	8000890 <display7SEG_2+0x3e0>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 8000598:	2200      	movs	r2, #0
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	48a6      	ldr	r0, [pc, #664]	; (8000838 <display7SEG_2+0x388>)
 800059e:	f001 fdc0 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48a3      	ldr	r0, [pc, #652]	; (8000838 <display7SEG_2+0x388>)
 80005aa:	f001 fdba 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_OFF);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b4:	48a0      	ldr	r0, [pc, #640]	; (8000838 <display7SEG_2+0x388>)
 80005b6:	f001 fdb4 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	489d      	ldr	r0, [pc, #628]	; (8000838 <display7SEG_2+0x388>)
 80005c2:	f001 fdae 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_ON);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	489a      	ldr	r0, [pc, #616]	; (8000838 <display7SEG_2+0x388>)
 80005ce:	f001 fda8 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	4897      	ldr	r0, [pc, #604]	; (8000838 <display7SEG_2+0x388>)
 80005da:	f001 fda2 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	4894      	ldr	r0, [pc, #592]	; (8000838 <display7SEG_2+0x388>)
 80005e6:	f001 fd9c 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 80005ea:	e151      	b.n	8000890 <display7SEG_2+0x3e0>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	4891      	ldr	r0, [pc, #580]	; (8000838 <display7SEG_2+0x388>)
 80005f2:	f001 fd96 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fc:	488e      	ldr	r0, [pc, #568]	; (8000838 <display7SEG_2+0x388>)
 80005fe:	f001 fd90 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000608:	488b      	ldr	r0, [pc, #556]	; (8000838 <display7SEG_2+0x388>)
 800060a:	f001 fd8a 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	4888      	ldr	r0, [pc, #544]	; (8000838 <display7SEG_2+0x388>)
 8000616:	f001 fd84 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	4885      	ldr	r0, [pc, #532]	; (8000838 <display7SEG_2+0x388>)
 8000622:	f001 fd7e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062c:	4882      	ldr	r0, [pc, #520]	; (8000838 <display7SEG_2+0x388>)
 800062e:	f001 fd78 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	487f      	ldr	r0, [pc, #508]	; (8000838 <display7SEG_2+0x388>)
 800063a:	f001 fd72 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 800063e:	e127      	b.n	8000890 <display7SEG_2+0x3e0>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_OFF);
 8000640:	2201      	movs	r2, #1
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	487c      	ldr	r0, [pc, #496]	; (8000838 <display7SEG_2+0x388>)
 8000646:	f001 fd6c 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	4879      	ldr	r0, [pc, #484]	; (8000838 <display7SEG_2+0x388>)
 8000652:	f001 fd66 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065c:	4876      	ldr	r0, [pc, #472]	; (8000838 <display7SEG_2+0x388>)
 800065e:	f001 fd60 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_OFF);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000668:	4873      	ldr	r0, [pc, #460]	; (8000838 <display7SEG_2+0x388>)
 800066a:	f001 fd5a 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000674:	4870      	ldr	r0, [pc, #448]	; (8000838 <display7SEG_2+0x388>)
 8000676:	f001 fd54 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	486d      	ldr	r0, [pc, #436]	; (8000838 <display7SEG_2+0x388>)
 8000682:	f001 fd4e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	486a      	ldr	r0, [pc, #424]	; (8000838 <display7SEG_2+0x388>)
 800068e:	f001 fd48 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 8000692:	e0fd      	b.n	8000890 <display7SEG_2+0x3e0>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4867      	ldr	r0, [pc, #412]	; (8000838 <display7SEG_2+0x388>)
 800069a:	f001 fd42 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_OFF);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a4:	4864      	ldr	r0, [pc, #400]	; (8000838 <display7SEG_2+0x388>)
 80006a6:	f001 fd3c 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4861      	ldr	r0, [pc, #388]	; (8000838 <display7SEG_2+0x388>)
 80006b2:	f001 fd36 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006bc:	485e      	ldr	r0, [pc, #376]	; (8000838 <display7SEG_2+0x388>)
 80006be:	f001 fd30 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c8:	485b      	ldr	r0, [pc, #364]	; (8000838 <display7SEG_2+0x388>)
 80006ca:	f001 fd2a 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d4:	4858      	ldr	r0, [pc, #352]	; (8000838 <display7SEG_2+0x388>)
 80006d6:	f001 fd24 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	4855      	ldr	r0, [pc, #340]	; (8000838 <display7SEG_2+0x388>)
 80006e2:	f001 fd1e 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 80006e6:	e0d3      	b.n	8000890 <display7SEG_2+0x3e0>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	4852      	ldr	r0, [pc, #328]	; (8000838 <display7SEG_2+0x388>)
 80006ee:	f001 fd18 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_OFF);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f8:	484f      	ldr	r0, [pc, #316]	; (8000838 <display7SEG_2+0x388>)
 80006fa:	f001 fd12 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000704:	484c      	ldr	r0, [pc, #304]	; (8000838 <display7SEG_2+0x388>)
 8000706:	f001 fd0c 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000710:	4849      	ldr	r0, [pc, #292]	; (8000838 <display7SEG_2+0x388>)
 8000712:	f001 fd06 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_ON);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4846      	ldr	r0, [pc, #280]	; (8000838 <display7SEG_2+0x388>)
 800071e:	f001 fd00 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000728:	4843      	ldr	r0, [pc, #268]	; (8000838 <display7SEG_2+0x388>)
 800072a:	f001 fcfa 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	4840      	ldr	r0, [pc, #256]	; (8000838 <display7SEG_2+0x388>)
 8000736:	f001 fcf4 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 800073a:	e0a9      	b.n	8000890 <display7SEG_2+0x3e0>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 800073c:	2200      	movs	r2, #0
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	483d      	ldr	r0, [pc, #244]	; (8000838 <display7SEG_2+0x388>)
 8000742:	f001 fcee 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	483a      	ldr	r0, [pc, #232]	; (8000838 <display7SEG_2+0x388>)
 800074e:	f001 fce8 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000758:	4837      	ldr	r0, [pc, #220]	; (8000838 <display7SEG_2+0x388>)
 800075a:	f001 fce2 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_OFF);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000764:	4834      	ldr	r0, [pc, #208]	; (8000838 <display7SEG_2+0x388>)
 8000766:	f001 fcdc 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000770:	4831      	ldr	r0, [pc, #196]	; (8000838 <display7SEG_2+0x388>)
 8000772:	f001 fcd6 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077c:	482e      	ldr	r0, [pc, #184]	; (8000838 <display7SEG_2+0x388>)
 800077e:	f001 fcd0 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_OFF);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	482b      	ldr	r0, [pc, #172]	; (8000838 <display7SEG_2+0x388>)
 800078a:	f001 fcca 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 800078e:	e07f      	b.n	8000890 <display7SEG_2+0x3e0>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 8000790:	2200      	movs	r2, #0
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	4828      	ldr	r0, [pc, #160]	; (8000838 <display7SEG_2+0x388>)
 8000796:	f001 fcc4 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4825      	ldr	r0, [pc, #148]	; (8000838 <display7SEG_2+0x388>)
 80007a2:	f001 fcbe 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ac:	4822      	ldr	r0, [pc, #136]	; (8000838 <display7SEG_2+0x388>)
 80007ae:	f001 fcb8 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	481f      	ldr	r0, [pc, #124]	; (8000838 <display7SEG_2+0x388>)
 80007ba:	f001 fcb2 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_ON);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <display7SEG_2+0x388>)
 80007c6:	f001 fcac 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <display7SEG_2+0x388>)
 80007d2:	f001 fca6 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	4816      	ldr	r0, [pc, #88]	; (8000838 <display7SEG_2+0x388>)
 80007de:	f001 fca0 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 80007e2:	e055      	b.n	8000890 <display7SEG_2+0x3e0>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_ON);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <display7SEG_2+0x388>)
 80007ea:	f001 fc9a 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_ON);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <display7SEG_2+0x388>)
 80007f6:	f001 fc94 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_ON);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <display7SEG_2+0x388>)
 8000802:	f001 fc8e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_ON);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <display7SEG_2+0x388>)
 800080e:	f001 fc88 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <display7SEG_2+0x388>)
 800081a:	f001 fc82 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_ON);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <display7SEG_2+0x388>)
 8000826:	f001 fc7c 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_ON);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	4801      	ldr	r0, [pc, #4]	; (8000838 <display7SEG_2+0x388>)
 8000832:	f001 fc76 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 8000836:	e02b      	b.n	8000890 <display7SEG_2+0x3e0>
 8000838:	40010c00 	.word	0x40010c00
		default:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, LED_OFF);
 800083c:	2201      	movs	r2, #1
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	4815      	ldr	r0, [pc, #84]	; (8000898 <display7SEG_2+0x3e8>)
 8000842:	f001 fc6e 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, LED_OFF);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <display7SEG_2+0x3e8>)
 800084e:	f001 fc68 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, LED_OFF);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000858:	480f      	ldr	r0, [pc, #60]	; (8000898 <display7SEG_2+0x3e8>)
 800085a:	f001 fc62 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, LED_OFF);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <display7SEG_2+0x3e8>)
 8000866:	f001 fc5c 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, LED_OFF);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <display7SEG_2+0x3e8>)
 8000872:	f001 fc56 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, LED_OFF);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <display7SEG_2+0x3e8>)
 800087e:	f001 fc50 	bl	8002122 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, LED_OFF);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <display7SEG_2+0x3e8>)
 800088a:	f001 fc4a 	bl	8002122 <HAL_GPIO_WritePin>
			break;
 800088e:	bf00      	nop
	}
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40010c00 	.word	0x40010c00

0800089c <enable_seg_0_1>:

void enable_seg_0_1(int num)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    switch (num) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <enable_seg_0_1+0x16>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d00b      	beq.n	80008c8 <enable_seg_0_1+0x2c>
 80008b0:	e015      	b.n	80008de <enable_seg_0_1+0x42>
        case 0:
            HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, ENABLE_SEG);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2102      	movs	r1, #2
 80008b6:	4811      	ldr	r0, [pc, #68]	; (80008fc <enable_seg_0_1+0x60>)
 80008b8:	f001 fc33 	bl	8002122 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, DISABLE_SEG);
 80008bc:	2201      	movs	r2, #1
 80008be:	2104      	movs	r1, #4
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <enable_seg_0_1+0x60>)
 80008c2:	f001 fc2e 	bl	8002122 <HAL_GPIO_WritePin>
            break;
 80008c6:	e015      	b.n	80008f4 <enable_seg_0_1+0x58>
        case 1:
            HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, DISABLE_SEG);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2102      	movs	r1, #2
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <enable_seg_0_1+0x60>)
 80008ce:	f001 fc28 	bl	8002122 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, ENABLE_SEG);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2104      	movs	r1, #4
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <enable_seg_0_1+0x60>)
 80008d8:	f001 fc23 	bl	8002122 <HAL_GPIO_WritePin>
            break;
 80008dc:	e00a      	b.n	80008f4 <enable_seg_0_1+0x58>
        default:
            HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, DISABLE_SEG);
 80008de:	2201      	movs	r2, #1
 80008e0:	2102      	movs	r1, #2
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <enable_seg_0_1+0x60>)
 80008e4:	f001 fc1d 	bl	8002122 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, DISABLE_SEG);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2104      	movs	r1, #4
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <enable_seg_0_1+0x60>)
 80008ee:	f001 fc18 	bl	8002122 <HAL_GPIO_WritePin>
            break;
 80008f2:	bf00      	nop
    }
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40010800 	.word	0x40010800

08000900 <enable_seg_2_3>:
void enable_seg_2_3(int num)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    switch (num) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <enable_seg_2_3+0x16>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d00b      	beq.n	800092c <enable_seg_2_3+0x2c>
 8000914:	e015      	b.n	8000942 <enable_seg_2_3+0x42>
        case 0:
            HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, ENABLE_SEG);
 8000916:	2200      	movs	r2, #0
 8000918:	2108      	movs	r1, #8
 800091a:	4811      	ldr	r0, [pc, #68]	; (8000960 <enable_seg_2_3+0x60>)
 800091c:	f001 fc01 	bl	8002122 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, DISABLE_SEG);
 8000920:	2201      	movs	r2, #1
 8000922:	2110      	movs	r1, #16
 8000924:	480e      	ldr	r0, [pc, #56]	; (8000960 <enable_seg_2_3+0x60>)
 8000926:	f001 fbfc 	bl	8002122 <HAL_GPIO_WritePin>
            break;
 800092a:	e015      	b.n	8000958 <enable_seg_2_3+0x58>
        case 1:
            HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, DISABLE_SEG);
 800092c:	2201      	movs	r2, #1
 800092e:	2108      	movs	r1, #8
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <enable_seg_2_3+0x60>)
 8000932:	f001 fbf6 	bl	8002122 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, ENABLE_SEG);
 8000936:	2200      	movs	r2, #0
 8000938:	2110      	movs	r1, #16
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <enable_seg_2_3+0x60>)
 800093c:	f001 fbf1 	bl	8002122 <HAL_GPIO_WritePin>
            break;
 8000940:	e00a      	b.n	8000958 <enable_seg_2_3+0x58>
        default:
            HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, DISABLE_SEG);
 8000942:	2201      	movs	r2, #1
 8000944:	2108      	movs	r1, #8
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <enable_seg_2_3+0x60>)
 8000948:	f001 fbeb 	bl	8002122 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, DISABLE_SEG);
 800094c:	2201      	movs	r2, #1
 800094e:	2110      	movs	r1, #16
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <enable_seg_2_3+0x60>)
 8000952:	f001 fbe6 	bl	8002122 <HAL_GPIO_WritePin>
            break;
 8000956:	bf00      	nop
    }
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010800 	.word	0x40010800

08000964 <updatebuffer2>:

void updatebuffer2(int duration)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	 led_buffer_2[0] = (duration/ 10) % 10;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <updatebuffer2+0x58>)
 8000970:	fb82 1203 	smull	r1, r2, r2, r3
 8000974:	1092      	asrs	r2, r2, #2
 8000976:	17db      	asrs	r3, r3, #31
 8000978:	1ad1      	subs	r1, r2, r3
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <updatebuffer2+0x58>)
 800097c:	fb83 2301 	smull	r2, r3, r3, r1
 8000980:	109a      	asrs	r2, r3, #2
 8000982:	17cb      	asrs	r3, r1, #31
 8000984:	1ad2      	subs	r2, r2, r3
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	1aca      	subs	r2, r1, r3
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <updatebuffer2+0x5c>)
 8000992:	601a      	str	r2, [r3, #0]
	 led_buffer_2[1] = duration % 10;
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <updatebuffer2+0x58>)
 8000998:	fb83 2301 	smull	r2, r3, r3, r1
 800099c:	109a      	asrs	r2, r3, #2
 800099e:	17cb      	asrs	r3, r1, #31
 80009a0:	1ad2      	subs	r2, r2, r3
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	1aca      	subs	r2, r1, r3
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <updatebuffer2+0x5c>)
 80009ae:	605a      	str	r2, [r3, #4]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	66666667 	.word	0x66666667
 80009c0:	200000b0 	.word	0x200000b0

080009c4 <updatebuffer1>:
void updatebuffer1(int duration)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	 led_buffer_1[0] = (duration/ 10) % 10;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <updatebuffer1+0x58>)
 80009d0:	fb82 1203 	smull	r1, r2, r2, r3
 80009d4:	1092      	asrs	r2, r2, #2
 80009d6:	17db      	asrs	r3, r3, #31
 80009d8:	1ad1      	subs	r1, r2, r3
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <updatebuffer1+0x58>)
 80009dc:	fb83 2301 	smull	r2, r3, r3, r1
 80009e0:	109a      	asrs	r2, r3, #2
 80009e2:	17cb      	asrs	r3, r1, #31
 80009e4:	1ad2      	subs	r2, r2, r3
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	1aca      	subs	r2, r1, r3
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <updatebuffer1+0x5c>)
 80009f2:	601a      	str	r2, [r3, #0]
	 led_buffer_1[1] = duration % 10;
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <updatebuffer1+0x58>)
 80009f8:	fb83 2301 	smull	r2, r3, r3, r1
 80009fc:	109a      	asrs	r2, r3, #2
 80009fe:	17cb      	asrs	r3, r1, #31
 8000a00:	1ad2      	subs	r2, r2, r3
 8000a02:	4613      	mov	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1aca      	subs	r2, r1, r3
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <updatebuffer1+0x5c>)
 8000a0e:	605a      	str	r2, [r3, #4]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	66666667 	.word	0x66666667
 8000a20:	200000a8 	.word	0x200000a8

08000a24 <isButtonPressed>:
int KeyReg1 [3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg2 [3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3 [3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress [3] = {100, 100, 100};

int isButtonPressed(int button){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	if (button_flag[button] == 1){
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <isButtonPressed+0x30>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d106      	bne.n	8000a46 <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <isButtonPressed+0x30>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <isButtonPressed+0x24>
	}
	return 0;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000090 	.word	0x20000090

08000a58 <subKeyProcess>:

void subKeyProcess(int button){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	button_flag[button] = 1;
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <subKeyProcess+0x1c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2101      	movs	r1, #1
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000090 	.word	0x20000090

08000a78 <getKeyInput>:


void getKeyInput(int button){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	KeyReg0[button] = KeyReg1[button];
 8000a80:	4a37      	ldr	r2, [pc, #220]	; (8000b60 <getKeyInput+0xe8>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a88:	4936      	ldr	r1, [pc, #216]	; (8000b64 <getKeyInput+0xec>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[button] = KeyReg2[button];
 8000a90:	4a35      	ldr	r2, [pc, #212]	; (8000b68 <getKeyInput+0xf0>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a98:	4931      	ldr	r1, [pc, #196]	; (8000b60 <getKeyInput+0xe8>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[button] = HAL_GPIO_ReadPin(BUTTON_PORT[button], BUTTON_PIN[button]);
 8000aa0:	4a32      	ldr	r2, [pc, #200]	; (8000b6c <getKeyInput+0xf4>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa8:	4931      	ldr	r1, [pc, #196]	; (8000b70 <getKeyInput+0xf8>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	f001 fb1e 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <getKeyInput+0xf0>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[button] == KeyReg1[button]) && (KeyReg1[button] == KeyReg2[button])){
 8000ac4:	4a27      	ldr	r2, [pc, #156]	; (8000b64 <getKeyInput+0xec>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000acc:	4924      	ldr	r1, [pc, #144]	; (8000b60 <getKeyInput+0xe8>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d13e      	bne.n	8000b56 <getKeyInput+0xde>
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <getKeyInput+0xe8>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae0:	4921      	ldr	r1, [pc, #132]	; (8000b68 <getKeyInput+0xf0>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d134      	bne.n	8000b56 <getKeyInput+0xde>
		if (KeyReg3[button] != KeyReg2[button]){
 8000aec:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <getKeyInput+0xfc>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000af4:	491c      	ldr	r1, [pc, #112]	; (8000b68 <getKeyInput+0xf0>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d016      	beq.n	8000b2e <getKeyInput+0xb6>
			KeyReg3[button] = KeyReg2[button];
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <getKeyInput+0xf0>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b08:	491a      	ldr	r1, [pc, #104]	; (8000b74 <getKeyInput+0xfc>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[button] == PRESSED_STATE){
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <getKeyInput+0xf0>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d11c      	bne.n	8000b56 <getKeyInput+0xde>
				subKeyProcess(button);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff9b 	bl	8000a58 <subKeyProcess>
				TimerForKeyPress[button] = 10;
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <getKeyInput+0x100>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	210a      	movs	r1, #10
 8000b28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
				KeyReg3[button] = NORMAL_STATE;
			}
		}
	}
}
 8000b2c:	e013      	b.n	8000b56 <getKeyInput+0xde>
			TimerForKeyPress[button]--;
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <getKeyInput+0x100>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	1e5a      	subs	r2, r3, #1
 8000b38:	490f      	ldr	r1, [pc, #60]	; (8000b78 <getKeyInput+0x100>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[button] <= 0){
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <getKeyInput+0x100>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dc04      	bgt.n	8000b56 <getKeyInput+0xde>
				KeyReg3[button] = NORMAL_STATE;
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <getKeyInput+0xfc>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2101      	movs	r1, #1
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000020 	.word	0x20000020
 8000b64:	20000014 	.word	0x20000014
 8000b68:	2000002c 	.word	0x2000002c
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	2000000c 	.word	0x2000000c
 8000b74:	20000038 	.word	0x20000038
 8000b78:	20000044 	.word	0x20000044

08000b7c <get3ButtonInput>:
void get3ButtonInput()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	getKeyInput(0);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ff79 	bl	8000a78 <getKeyInput>
	getKeyInput(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ff76 	bl	8000a78 <getKeyInput>
	getKeyInput(2);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f7ff ff73 	bl	8000a78 <getKeyInput>

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <task_update_time1>:
#include "button.h"




void task_update_time1() {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    if (remaining_time1 > 0) {
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <task_update_time1+0x24>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dd09      	ble.n	8000bb8 <task_update_time1+0x20>
        remaining_time1--;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <task_update_time1+0x24>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <task_update_time1+0x24>)
 8000bac:	6013      	str	r3, [r2, #0]
        updatebuffer1(remaining_time1);
 8000bae:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <task_update_time1+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff06 	bl	80009c4 <updatebuffer1>
    }
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000bc 	.word	0x200000bc

08000bc0 <task_update_time2>:

void task_update_time2() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    if (remaining_time2 > 0) {
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <task_update_time2+0x24>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd09      	ble.n	8000be0 <task_update_time2+0x20>
        remaining_time2--;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <task_update_time2+0x24>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <task_update_time2+0x24>)
 8000bd4:	6013      	str	r3, [r2, #0]
        updatebuffer2(remaining_time2);
 8000bd6:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <task_update_time2+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fec2 	bl	8000964 <updatebuffer2>
    }
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000c0 	.word	0x200000c0

08000be8 <task_display_7seg1>:

void task_display_7seg1() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

    display7SEG(led_buffer_1[index_led_1]);
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <task_display_7seg1+0x38>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <task_display_7seg1+0x3c>)
 8000bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff faa8 	bl	800014c <display7SEG>
    enable_seg_0_1(index_led_1);
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <task_display_7seg1+0x38>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe4b 	bl	800089c <enable_seg_0_1>
    index_led_1 = (index_led_1 + 1) % 2;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <task_display_7seg1+0x38>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	bfb8      	it	lt
 8000c14:	425b      	neglt	r3, r3
 8000c16:	4a02      	ldr	r2, [pc, #8]	; (8000c20 <task_display_7seg1+0x38>)
 8000c18:	6013      	str	r3, [r2, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000a0 	.word	0x200000a0
 8000c24:	200000a8 	.word	0x200000a8

08000c28 <task_display_7seg2>:

void task_display_7seg2() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

    display7SEG_2(led_buffer_2[index_led_2]);
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <task_display_7seg2+0x38>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <task_display_7seg2+0x3c>)
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc3a 	bl	80004b0 <display7SEG_2>
    enable_seg_2_3(index_led_2);
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <task_display_7seg2+0x38>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fe5d 	bl	8000900 <enable_seg_2_3>
    index_led_2 = (index_led_2 + 1) % 2;
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <task_display_7seg2+0x38>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	bfb8      	it	lt
 8000c54:	425b      	neglt	r3, r3
 8000c56:	4a02      	ldr	r2, [pc, #8]	; (8000c60 <task_display_7seg2+0x38>)
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000a4 	.word	0x200000a4
 8000c64:	200000b0 	.word	0x200000b0

08000c68 <change_mode_sch>:




void change_mode_sch(int mode )
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]


	MODE = mode;
 8000c70:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <change_mode_sch+0x18>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]

}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000058 	.word	0x20000058

08000c84 <display_buffer1>:


void display_buffer1()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0


	  	display7SEG(led_buffer_1[index_led_1]);
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <display_buffer1+0x3c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <display_buffer1+0x40>)
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fa5a 	bl	800014c <display7SEG>
	  	enable_seg_0_1(index_led_1);
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <display_buffer1+0x3c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fdfd 	bl	800089c <enable_seg_0_1>
	      index_led_1++;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <display_buffer1+0x3c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <display_buffer1+0x3c>)
 8000caa:	6013      	str	r3, [r2, #0]
	  	if (index_led_1 > 1)
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <display_buffer1+0x3c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	dd02      	ble.n	8000cba <display_buffer1+0x36>
	      {
	      index_led_1 = 0;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <display_buffer1+0x3c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
	      }

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000a0 	.word	0x200000a0
 8000cc4:	200000a8 	.word	0x200000a8

08000cc8 <display_buffer2>:
void display_buffer2()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

	    	display7SEG_2(led_buffer_2[index_led_2]);
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <display_buffer2+0x3c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <display_buffer2+0x40>)
 8000cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fbea 	bl	80004b0 <display7SEG_2>
	    	enable_seg_2_3(index_led_2);
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <display_buffer2+0x3c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fe0d 	bl	8000900 <enable_seg_2_3>
	        index_led_2++;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <display_buffer2+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <display_buffer2+0x3c>)
 8000cee:	6013      	str	r3, [r2, #0]
	    	if (index_led_2 > 1)
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <display_buffer2+0x3c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	dd02      	ble.n	8000cfe <display_buffer2+0x36>
	        {
	        index_led_2 = 0;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <display_buffer2+0x3c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
	        }


}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000a4 	.word	0x200000a4
 8000d08:	200000b0 	.word	0x200000b0

08000d0c <displayDuration_sch>:

void displayDuration_sch(int mode, int duration) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
    led_buffer_1[0] = 0;            // LED 0 hiển thị chế độ (mode)
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <displayDuration_sch+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
    led_buffer_1[1] = mode ;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <displayDuration_sch+0x64>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6053      	str	r3, [r2, #4]
    led_buffer_2[1] = duration % 10;   // LED 2 hiển thị hàng đơn vị của duration
 8000d22:	6839      	ldr	r1, [r7, #0]
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <displayDuration_sch+0x68>)
 8000d26:	fb83 2301 	smull	r2, r3, r3, r1
 8000d2a:	109a      	asrs	r2, r3, #2
 8000d2c:	17cb      	asrs	r3, r1, #31
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1aca      	subs	r2, r1, r3
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <displayDuration_sch+0x6c>)
 8000d3c:	605a      	str	r2, [r3, #4]
    led_buffer_2[0] = duration / 10;   // LED 3 hiển thị hàng chục của duration
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <displayDuration_sch+0x68>)
 8000d42:	fb82 1203 	smull	r1, r2, r2, r3
 8000d46:	1092      	asrs	r2, r2, #2
 8000d48:	17db      	asrs	r3, r3, #31
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <displayDuration_sch+0x6c>)
 8000d4e:	6013      	str	r3, [r2, #0]
   SCH_Add_Task(display_buffer1, 0, 300);
 8000d50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d54:	2100      	movs	r1, #0
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <displayDuration_sch+0x70>)
 8000d58:	f000 fdd6 	bl	8001908 <SCH_Add_Task>
   SCH_Add_Task(display_buffer2, 0, 300);
 8000d5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d60:	2100      	movs	r1, #0
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <displayDuration_sch+0x74>)
 8000d64:	f000 fdd0 	bl	8001908 <SCH_Add_Task>


}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000a8 	.word	0x200000a8
 8000d74:	66666667 	.word	0x66666667
 8000d78:	200000b0 	.word	0x200000b0
 8000d7c:	08000c85 	.word	0x08000c85
 8000d80:	08000cc9 	.word	0x08000cc9

08000d84 <fsm_manual_run_sch>:


void fsm_manual_run_sch()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	switch(MODE)
 8000d88:	4baa      	ldr	r3, [pc, #680]	; (8001034 <fsm_manual_run_sch+0x2b0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3b0a      	subs	r3, #10
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	f200 81f6 	bhi.w	8001180 <fsm_manual_run_sch+0x3fc>
 8000d94:	a201      	add	r2, pc, #4	; (adr r2, 8000d9c <fsm_manual_run_sch+0x18>)
 8000d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9a:	bf00      	nop
 8000d9c:	08000dc9 	.word	0x08000dc9
 8000da0:	08000e29 	.word	0x08000e29
 8000da4:	08000f87 	.word	0x08000f87
 8000da8:	08000fd9 	.word	0x08000fd9
 8000dac:	0800106d 	.word	0x0800106d
 8000db0:	080010d7 	.word	0x080010d7
 8000db4:	08001105 	.word	0x08001105
 8000db8:	08001153 	.word	0x08001153
 8000dbc:	080010c7 	.word	0x080010c7
 8000dc0:	08001143 	.word	0x08001143
 8000dc4:	08001133 	.word	0x08001133
	{
	    case INIT_MODE:
	    	 init1();
 8000dc8:	f000 fa0a 	bl	80011e0 <init1>
	    	 init2();
 8000dcc:	f000 fa20 	bl	8001210 <init2>
	    	 led_buffer_1[0] = 0;
 8000dd0:	4b99      	ldr	r3, [pc, #612]	; (8001038 <fsm_manual_run_sch+0x2b4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
	    	 led_buffer_1[1] = 0;
 8000dd6:	4b98      	ldr	r3, [pc, #608]	; (8001038 <fsm_manual_run_sch+0x2b4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
	    	 led_buffer_2[1] = 0;
 8000ddc:	4b97      	ldr	r3, [pc, #604]	; (800103c <fsm_manual_run_sch+0x2b8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
	    	 led_buffer_2[0] = 0;
 8000de2:	4b96      	ldr	r3, [pc, #600]	; (800103c <fsm_manual_run_sch+0x2b8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
	    	   SCH_Add_Task(display_buffer1, 0, 300);
 8000de8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dec:	2100      	movs	r1, #0
 8000dee:	4894      	ldr	r0, [pc, #592]	; (8001040 <fsm_manual_run_sch+0x2bc>)
 8000df0:	f000 fd8a 	bl	8001908 <SCH_Add_Task>
	    	   SCH_Add_Task(display_buffer2, 0, 300);
 8000df4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4892      	ldr	r0, [pc, #584]	; (8001044 <fsm_manual_run_sch+0x2c0>)
 8000dfc:	f000 fd84 	bl	8001908 <SCH_Add_Task>
	    		SCH_Add_Task(get3ButtonInput, 0, 10);
 8000e00:	220a      	movs	r2, #10
 8000e02:	2100      	movs	r1, #0
 8000e04:	4890      	ldr	r0, [pc, #576]	; (8001048 <fsm_manual_run_sch+0x2c4>)
 8000e06:	f000 fd7f 	bl	8001908 <SCH_Add_Task>
	    	    if (isButtonPressed(0) == 1){
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fe0a 	bl	8000a24 <isButtonPressed>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	f040 81b6 	bne.w	8001184 <fsm_manual_run_sch+0x400>
	    	    	tempDuration = RED_DURATION;
 8000e18:	4b8c      	ldr	r3, [pc, #560]	; (800104c <fsm_manual_run_sch+0x2c8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a8c      	ldr	r2, [pc, #560]	; (8001050 <fsm_manual_run_sch+0x2cc>)
 8000e1e:	6013      	str	r3, [r2, #0]
	    	    	change_mode_sch(MODE_1);
 8000e20:	200b      	movs	r0, #11
 8000e22:	f7ff ff21 	bl	8000c68 <change_mode_sch>


	    	    }
	    	    break;
 8000e26:	e1ad      	b.n	8001184 <fsm_manual_run_sch+0x400>
	    case MODE_1:
	    	task_update_time1();
 8000e28:	f7ff feb6 	bl	8000b98 <task_update_time1>
	    	task_display_7seg1();
 8000e2c:	f7ff fedc 	bl	8000be8 <task_display_7seg1>
	    	    switch (LED_STATE1) {
 8000e30:	4b88      	ldr	r3, [pc, #544]	; (8001054 <fsm_manual_run_sch+0x2d0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d843      	bhi.n	8000ec2 <fsm_manual_run_sch+0x13e>
 8000e3a:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <fsm_manual_run_sch+0xbc>)
 8000e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000e65 	.word	0x08000e65
 8000e48:	08000e81 	.word	0x08000e81
 8000e4c:	08000e9d 	.word	0x08000e9d
	    	        case INIT_STATE:
	    	            setup1();
 8000e50:	f000 f9ae 	bl	80011b0 <setup1>
	    	            remaining_time1 = RED_DURATION;
 8000e54:	4b7d      	ldr	r3, [pc, #500]	; (800104c <fsm_manual_run_sch+0x2c8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a7f      	ldr	r2, [pc, #508]	; (8001058 <fsm_manual_run_sch+0x2d4>)
 8000e5a:	6013      	str	r3, [r2, #0]
	    	            LED_STATE1 = AUTO_RED;
 8000e5c:	4b7d      	ldr	r3, [pc, #500]	; (8001054 <fsm_manual_run_sch+0x2d0>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	601a      	str	r2, [r3, #0]
	    	            break;
 8000e62:	e02e      	b.n	8000ec2 <fsm_manual_run_sch+0x13e>
	    	        case AUTO_RED:
	    	            red_led1();
 8000e64:	f000 fa04 	bl	8001270 <red_led1>
	    	            if (remaining_time1 == 0) {
 8000e68:	4b7b      	ldr	r3, [pc, #492]	; (8001058 <fsm_manual_run_sch+0x2d4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d123      	bne.n	8000eb8 <fsm_manual_run_sch+0x134>
	    	                remaining_time1 = GREEN_DURATION;
 8000e70:	4b7a      	ldr	r3, [pc, #488]	; (800105c <fsm_manual_run_sch+0x2d8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a78      	ldr	r2, [pc, #480]	; (8001058 <fsm_manual_run_sch+0x2d4>)
 8000e76:	6013      	str	r3, [r2, #0]
	    	                LED_STATE1 = AUTO_GREEN;
 8000e78:	4b76      	ldr	r3, [pc, #472]	; (8001054 <fsm_manual_run_sch+0x2d0>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	601a      	str	r2, [r3, #0]
	    	            }
	    	            break;
 8000e7e:	e01b      	b.n	8000eb8 <fsm_manual_run_sch+0x134>
	    	        case AUTO_GREEN:
	    	            green_led1();
 8000e80:	f000 fa0e 	bl	80012a0 <green_led1>
	    	            if (remaining_time1 == 0) {
 8000e84:	4b74      	ldr	r3, [pc, #464]	; (8001058 <fsm_manual_run_sch+0x2d4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d117      	bne.n	8000ebc <fsm_manual_run_sch+0x138>
	    	                remaining_time1 = YELLOW_DURATION;
 8000e8c:	4b74      	ldr	r3, [pc, #464]	; (8001060 <fsm_manual_run_sch+0x2dc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a71      	ldr	r2, [pc, #452]	; (8001058 <fsm_manual_run_sch+0x2d4>)
 8000e92:	6013      	str	r3, [r2, #0]
	    	                LED_STATE1 = AUTO_YELLOW;
 8000e94:	4b6f      	ldr	r3, [pc, #444]	; (8001054 <fsm_manual_run_sch+0x2d0>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	601a      	str	r2, [r3, #0]
	    	            }
	    	            break;
 8000e9a:	e00f      	b.n	8000ebc <fsm_manual_run_sch+0x138>
	    	        case AUTO_YELLOW:
	    	            yellow_led1();
 8000e9c:	f000 fa18 	bl	80012d0 <yellow_led1>
	    	            if (remaining_time1 == 0) {
 8000ea0:	4b6d      	ldr	r3, [pc, #436]	; (8001058 <fsm_manual_run_sch+0x2d4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10b      	bne.n	8000ec0 <fsm_manual_run_sch+0x13c>
	    	                remaining_time1 = RED_DURATION;
 8000ea8:	4b68      	ldr	r3, [pc, #416]	; (800104c <fsm_manual_run_sch+0x2c8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a6a      	ldr	r2, [pc, #424]	; (8001058 <fsm_manual_run_sch+0x2d4>)
 8000eae:	6013      	str	r3, [r2, #0]
	    	                LED_STATE1 = AUTO_RED;
 8000eb0:	4b68      	ldr	r3, [pc, #416]	; (8001054 <fsm_manual_run_sch+0x2d0>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	601a      	str	r2, [r3, #0]
	    	            }
	    	            break;
 8000eb6:	e003      	b.n	8000ec0 <fsm_manual_run_sch+0x13c>
	    	            break;
 8000eb8:	bf00      	nop
 8000eba:	e002      	b.n	8000ec2 <fsm_manual_run_sch+0x13e>
	    	            break;
 8000ebc:	bf00      	nop
 8000ebe:	e000      	b.n	8000ec2 <fsm_manual_run_sch+0x13e>
	    	            break;
 8000ec0:	bf00      	nop
	    	    }


	    	    task_update_time2();
 8000ec2:	f7ff fe7d 	bl	8000bc0 <task_update_time2>
	    	    task_display_7seg2();
 8000ec6:	f7ff feaf 	bl	8000c28 <task_display_7seg2>
	    	    switch (LED_STATE2) {
 8000eca:	4b66      	ldr	r3, [pc, #408]	; (8001064 <fsm_manual_run_sch+0x2e0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d844      	bhi.n	8000f5e <fsm_manual_run_sch+0x1da>
 8000ed4:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <fsm_manual_run_sch+0x158>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	08000f01 	.word	0x08000f01
 8000ee4:	08000f1d 	.word	0x08000f1d
 8000ee8:	08000f39 	.word	0x08000f39
	    	            case INIT_STATE:
	    	                setup2();
 8000eec:	f000 f9a8 	bl	8001240 <setup2>
	    	                remaining_time2 = GREEN_DURATION;
 8000ef0:	4b5a      	ldr	r3, [pc, #360]	; (800105c <fsm_manual_run_sch+0x2d8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a5c      	ldr	r2, [pc, #368]	; (8001068 <fsm_manual_run_sch+0x2e4>)
 8000ef6:	6013      	str	r3, [r2, #0]
	    	                LED_STATE2 = AUTO_GREEN;
 8000ef8:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <fsm_manual_run_sch+0x2e0>)
 8000efa:	2203      	movs	r2, #3
 8000efc:	601a      	str	r2, [r3, #0]
	    	                break;
 8000efe:	e02e      	b.n	8000f5e <fsm_manual_run_sch+0x1da>
	    	            case AUTO_RED:
	    	                red_led2();
 8000f00:	f000 f9fe 	bl	8001300 <red_led2>
	    	                if (remaining_time2 == 0) {
 8000f04:	4b58      	ldr	r3, [pc, #352]	; (8001068 <fsm_manual_run_sch+0x2e4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d123      	bne.n	8000f54 <fsm_manual_run_sch+0x1d0>
	    	                    remaining_time2 = GREEN_DURATION;
 8000f0c:	4b53      	ldr	r3, [pc, #332]	; (800105c <fsm_manual_run_sch+0x2d8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a55      	ldr	r2, [pc, #340]	; (8001068 <fsm_manual_run_sch+0x2e4>)
 8000f12:	6013      	str	r3, [r2, #0]
	    	                    LED_STATE2 = AUTO_GREEN;
 8000f14:	4b53      	ldr	r3, [pc, #332]	; (8001064 <fsm_manual_run_sch+0x2e0>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	601a      	str	r2, [r3, #0]
	    	                }
	    	                break;
 8000f1a:	e01b      	b.n	8000f54 <fsm_manual_run_sch+0x1d0>
	    	            case AUTO_GREEN:
	    	                green_led2();
 8000f1c:	f000 fa08 	bl	8001330 <green_led2>
	    	                if (remaining_time2 == 0) {
 8000f20:	4b51      	ldr	r3, [pc, #324]	; (8001068 <fsm_manual_run_sch+0x2e4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d117      	bne.n	8000f58 <fsm_manual_run_sch+0x1d4>
	    	                    remaining_time2 = YELLOW_DURATION;
 8000f28:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <fsm_manual_run_sch+0x2dc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a4e      	ldr	r2, [pc, #312]	; (8001068 <fsm_manual_run_sch+0x2e4>)
 8000f2e:	6013      	str	r3, [r2, #0]
	    	                    LED_STATE2 = AUTO_YELLOW;
 8000f30:	4b4c      	ldr	r3, [pc, #304]	; (8001064 <fsm_manual_run_sch+0x2e0>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	601a      	str	r2, [r3, #0]
	    	                }
	    	                break;
 8000f36:	e00f      	b.n	8000f58 <fsm_manual_run_sch+0x1d4>
	    	            case AUTO_YELLOW:
	    	                yellow_led2();
 8000f38:	f000 fa12 	bl	8001360 <yellow_led2>
	    	                if (remaining_time2 == 0) {
 8000f3c:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <fsm_manual_run_sch+0x2e4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <fsm_manual_run_sch+0x1d8>
	    	                    remaining_time2 = RED_DURATION;
 8000f44:	4b41      	ldr	r3, [pc, #260]	; (800104c <fsm_manual_run_sch+0x2c8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a47      	ldr	r2, [pc, #284]	; (8001068 <fsm_manual_run_sch+0x2e4>)
 8000f4a:	6013      	str	r3, [r2, #0]
	    	                    LED_STATE2 = AUTO_RED;
 8000f4c:	4b45      	ldr	r3, [pc, #276]	; (8001064 <fsm_manual_run_sch+0x2e0>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	601a      	str	r2, [r3, #0]
	    	                }
	    	                break;
 8000f52:	e003      	b.n	8000f5c <fsm_manual_run_sch+0x1d8>
	    	                break;
 8000f54:	bf00      	nop
 8000f56:	e002      	b.n	8000f5e <fsm_manual_run_sch+0x1da>
	    	                break;
 8000f58:	bf00      	nop
 8000f5a:	e000      	b.n	8000f5e <fsm_manual_run_sch+0x1da>
	    	                break;
 8000f5c:	bf00      	nop
	    	        }


			  SCH_Add_Task(get3ButtonInput, 0, 10);
 8000f5e:	220a      	movs	r2, #10
 8000f60:	2100      	movs	r1, #0
 8000f62:	4839      	ldr	r0, [pc, #228]	; (8001048 <fsm_manual_run_sch+0x2c4>)
 8000f64:	f000 fcd0 	bl	8001908 <SCH_Add_Task>
	    	 if (isButtonPressed(0) == 1){
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fd5b 	bl	8000a24 <isButtonPressed>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	f040 8109 	bne.w	8001188 <fsm_manual_run_sch+0x404>
	    		    		 tempDuration = RED_DURATION;
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <fsm_manual_run_sch+0x2c8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a35      	ldr	r2, [pc, #212]	; (8001050 <fsm_manual_run_sch+0x2cc>)
 8000f7c:	6013      	str	r3, [r2, #0]
	    		    		  MODE= MODE_2;
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <fsm_manual_run_sch+0x2b0>)
 8000f80:	220c      	movs	r2, #12
 8000f82:	601a      	str	r2, [r3, #0]

	    		    	 }



	    	 break ;
 8000f84:	e100      	b.n	8001188 <fsm_manual_run_sch+0x404>

	    case MODE_2:// red
	    	displayDuration_sch(2, tempDuration);
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <fsm_manual_run_sch+0x2cc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f7ff febd 	bl	8000d0c <displayDuration_sch>

            toggle_red();
 8000f92:	f000 f9fd 	bl	8001390 <toggle_red>


	    	if(isButtonPressed(0)==1)
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fd44 	bl	8000a24 <isButtonPressed>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d106      	bne.n	8000fb0 <fsm_manual_run_sch+0x22c>
	    	{
	    		tempDuration = YELLOW_DURATION;
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <fsm_manual_run_sch+0x2dc>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <fsm_manual_run_sch+0x2cc>)
 8000fa8:	6013      	str	r3, [r2, #0]
	    		change_mode_sch(MODE_3);
 8000faa:	200d      	movs	r0, #13
 8000fac:	f7ff fe5c 	bl	8000c68 <change_mode_sch>
	    	}



			if (isButtonPressed(1) == 1){
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff fd37 	bl	8000a24 <isButtonPressed>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d102      	bne.n	8000fc2 <fsm_manual_run_sch+0x23e>

				change_mode_sch(RED_CONFIG);
 8000fbc:	200f      	movs	r0, #15
 8000fbe:	f7ff fe53 	bl	8000c68 <change_mode_sch>


			}
			if (isButtonPressed(2) == 1){
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f7ff fd2e 	bl	8000a24 <isButtonPressed>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	f040 80de 	bne.w	800118c <fsm_manual_run_sch+0x408>
				change_mode_sch(RED_CONFIRM);
 8000fd0:	2012      	movs	r0, #18
 8000fd2:	f7ff fe49 	bl	8000c68 <change_mode_sch>
			}
	    	break ;
 8000fd6:	e0d9      	b.n	800118c <fsm_manual_run_sch+0x408>

	    case MODE_3://yellow
	    	displayDuration_sch(3, tempDuration);
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <fsm_manual_run_sch+0x2cc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f7ff fe94 	bl	8000d0c <displayDuration_sch>
	    	SCH_Add_Task(get3ButtonInput, 0, 10);
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4817      	ldr	r0, [pc, #92]	; (8001048 <fsm_manual_run_sch+0x2c4>)
 8000fea:	f000 fc8d 	bl	8001908 <SCH_Add_Task>

	    	if(isButtonPressed(0)==1)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fd18 	bl	8000a24 <isButtonPressed>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d106      	bne.n	8001008 <fsm_manual_run_sch+0x284>
	    	{
	    		tempDuration = GREEN_DURATION;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <fsm_manual_run_sch+0x2d8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <fsm_manual_run_sch+0x2cc>)
 8001000:	6013      	str	r3, [r2, #0]
	    		change_mode_sch(MODE_4);
 8001002:	200e      	movs	r0, #14
 8001004:	f7ff fe30 	bl	8000c68 <change_mode_sch>
	    	}


			if (isButtonPressed(1) == 1){
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fd0b 	bl	8000a24 <isButtonPressed>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d102      	bne.n	800101a <fsm_manual_run_sch+0x296>
				change_mode_sch(YELLOW_CONFIG);
 8001014:	2010      	movs	r0, #16
 8001016:	f7ff fe27 	bl	8000c68 <change_mode_sch>

			}
			if (isButtonPressed(2) == 1){
 800101a:	2002      	movs	r0, #2
 800101c:	f7ff fd02 	bl	8000a24 <isButtonPressed>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <fsm_manual_run_sch+0x2a8>
				change_mode_sch(YELLOW_CONFIRM);
 8001026:	2014      	movs	r0, #20
 8001028:	f7ff fe1e 	bl	8000c68 <change_mode_sch>
			}
			toggle_yellow();
 800102c:	f000 f9d8 	bl	80013e0 <toggle_yellow>
	    	break ;
 8001030:	e0af      	b.n	8001192 <fsm_manual_run_sch+0x40e>
 8001032:	bf00      	nop
 8001034:	20000058 	.word	0x20000058
 8001038:	200000a8 	.word	0x200000a8
 800103c:	200000b0 	.word	0x200000b0
 8001040:	08000c85 	.word	0x08000c85
 8001044:	08000cc9 	.word	0x08000cc9
 8001048:	08000b7d 	.word	0x08000b7d
 800104c:	2000005c 	.word	0x2000005c
 8001050:	2000009c 	.word	0x2000009c
 8001054:	20000050 	.word	0x20000050
 8001058:	200000bc 	.word	0x200000bc
 800105c:	20000064 	.word	0x20000064
 8001060:	20000060 	.word	0x20000060
 8001064:	20000054 	.word	0x20000054
 8001068:	200000c0 	.word	0x200000c0
	    case MODE_4://green
	    	toggle_green();
 800106c:	f000 f9e0 	bl	8001430 <toggle_green>
	    	displayDuration_sch(4, tempDuration);
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff fe48 	bl	8000d0c <displayDuration_sch>
	    	SCH_Add_Task(get3ButtonInput, 0, 10);
 800107c:	220a      	movs	r2, #10
 800107e:	2100      	movs	r1, #0
 8001080:	4846      	ldr	r0, [pc, #280]	; (800119c <fsm_manual_run_sch+0x418>)
 8001082:	f000 fc41 	bl	8001908 <SCH_Add_Task>
	    	if(isButtonPressed(0)==1)
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fccc 	bl	8000a24 <isButtonPressed>
 800108c:	4603      	mov	r3, r0
 800108e:	2b01      	cmp	r3, #1
 8001090:	d106      	bne.n	80010a0 <fsm_manual_run_sch+0x31c>
	    	{
	    		tempDuration = RED_DURATION;
 8001092:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <fsm_manual_run_sch+0x41c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a40      	ldr	r2, [pc, #256]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001098:	6013      	str	r3, [r2, #0]
	    		change_mode_sch(INIT_MODE);
 800109a:	200a      	movs	r0, #10
 800109c:	f7ff fde4 	bl	8000c68 <change_mode_sch>
	    	}


			if (isButtonPressed(1) == 1){
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff fcbf 	bl	8000a24 <isButtonPressed>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d102      	bne.n	80010b2 <fsm_manual_run_sch+0x32e>
				change_mode_sch(GREEN_CONFIG);
 80010ac:	2011      	movs	r0, #17
 80010ae:	f7ff fddb 	bl	8000c68 <change_mode_sch>

			}
			if (isButtonPressed(2) == 1){
 80010b2:	2002      	movs	r0, #2
 80010b4:	f7ff fcb6 	bl	8000a24 <isButtonPressed>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d168      	bne.n	8001190 <fsm_manual_run_sch+0x40c>
				change_mode_sch(GREEN_CONFIRM);
 80010be:	2013      	movs	r0, #19
 80010c0:	f7ff fdd2 	bl	8000c68 <change_mode_sch>
			}


	    	break ;
 80010c4:	e064      	b.n	8001190 <fsm_manual_run_sch+0x40c>



	    case RED_CONFIRM:
	    	RED_DURATION = tempDuration;
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <fsm_manual_run_sch+0x414>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <fsm_manual_run_sch+0x41c>)
 80010cc:	6013      	str	r3, [r2, #0]
	    	change_mode_sch(MODE_2);
 80010ce:	200c      	movs	r0, #12
 80010d0:	f7ff fdca 	bl	8000c68 <change_mode_sch>
	    	break ;
 80010d4:	e05d      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    case RED_CONFIG:
	    	tempDuration++;
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <fsm_manual_run_sch+0x414>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a2e      	ldr	r2, [pc, #184]	; (8001198 <fsm_manual_run_sch+0x414>)
 80010de:	6013      	str	r3, [r2, #0]
	    	tempDuration %= 100;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <fsm_manual_run_sch+0x414>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <fsm_manual_run_sch+0x420>)
 80010e6:	fb83 1302 	smull	r1, r3, r3, r2
 80010ea:	1159      	asrs	r1, r3, #5
 80010ec:	17d3      	asrs	r3, r2, #31
 80010ee:	1acb      	subs	r3, r1, r3
 80010f0:	2164      	movs	r1, #100	; 0x64
 80010f2:	fb01 f303 	mul.w	r3, r1, r3
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	4a27      	ldr	r2, [pc, #156]	; (8001198 <fsm_manual_run_sch+0x414>)
 80010fa:	6013      	str	r3, [r2, #0]
	    	change_mode_sch(MODE_2);
 80010fc:	200c      	movs	r0, #12
 80010fe:	f7ff fdb3 	bl	8000c68 <change_mode_sch>
	    	break;
 8001102:	e046      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    case YELLOW_CONFIG:
	    	tempDuration++;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <fsm_manual_run_sch+0x414>)
 800110c:	6013      	str	r3, [r2, #0]
	        tempDuration %= 100;
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <fsm_manual_run_sch+0x420>)
 8001114:	fb83 1302 	smull	r1, r3, r3, r2
 8001118:	1159      	asrs	r1, r3, #5
 800111a:	17d3      	asrs	r3, r2, #31
 800111c:	1acb      	subs	r3, r1, r3
 800111e:	2164      	movs	r1, #100	; 0x64
 8001120:	fb01 f303 	mul.w	r3, r1, r3
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001128:	6013      	str	r3, [r2, #0]
	    	change_mode_sch(MODE_3);
 800112a:	200d      	movs	r0, #13
 800112c:	f7ff fd9c 	bl	8000c68 <change_mode_sch>
	        break;
 8001130:	e02f      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    case YELLOW_CONFIRM:
			YELLOW_DURATION = tempDuration;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <fsm_manual_run_sch+0x424>)
 8001138:	6013      	str	r3, [r2, #0]
			change_mode_sch(MODE_3);
 800113a:	200d      	movs	r0, #13
 800113c:	f7ff fd94 	bl	8000c68 <change_mode_sch>
			break ;
 8001140:	e027      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    case GREEN_CONFIRM:
	    	GREEN_DURATION = tempDuration;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <fsm_manual_run_sch+0x428>)
 8001148:	6013      	str	r3, [r2, #0]
	    	change_mode_sch(MODE_4);
 800114a:	200e      	movs	r0, #14
 800114c:	f7ff fd8c 	bl	8000c68 <change_mode_sch>
	    	break;
 8001150:	e01f      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    case GREEN_CONFIG:
	    	tempDuration++;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <fsm_manual_run_sch+0x414>)
 800115a:	6013      	str	r3, [r2, #0]
	        tempDuration %= 100;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <fsm_manual_run_sch+0x414>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <fsm_manual_run_sch+0x420>)
 8001162:	fb83 1302 	smull	r1, r3, r3, r2
 8001166:	1159      	asrs	r1, r3, #5
 8001168:	17d3      	asrs	r3, r2, #31
 800116a:	1acb      	subs	r3, r1, r3
 800116c:	2164      	movs	r1, #100	; 0x64
 800116e:	fb01 f303 	mul.w	r3, r1, r3
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	4a08      	ldr	r2, [pc, #32]	; (8001198 <fsm_manual_run_sch+0x414>)
 8001176:	6013      	str	r3, [r2, #0]
	    	change_mode_sch(MODE_4);
 8001178:	200e      	movs	r0, #14
 800117a:	f7ff fd75 	bl	8000c68 <change_mode_sch>
	        break;
 800117e:	e008      	b.n	8001192 <fsm_manual_run_sch+0x40e>
		default:
			 break;
 8001180:	bf00      	nop
 8001182:	e006      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    	    break;
 8001184:	bf00      	nop
 8001186:	e004      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    	 break ;
 8001188:	bf00      	nop
 800118a:	e002      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    	break ;
 800118c:	bf00      	nop
 800118e:	e000      	b.n	8001192 <fsm_manual_run_sch+0x40e>
	    	break ;
 8001190:	bf00      	nop


	}


}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000009c 	.word	0x2000009c
 800119c:	08000b7d 	.word	0x08000b7d
 80011a0:	2000005c 	.word	0x2000005c
 80011a4:	51eb851f 	.word	0x51eb851f
 80011a8:	20000060 	.word	0x20000060
 80011ac:	20000064 	.word	0x20000064

080011b0 <setup1>:
#include "global.h"
#include "7seg.h"
#include "main.h"

void setup1()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, GPIO_PIN_SET);   // Tắt đèn đỏ Lane 1
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <setup1+0x2c>)
 80011bc:	f000 ffb1 	bl	8002122 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, GPIO_PIN_SET); // Tắt đèn xanh Lane 1
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <setup1+0x2c>)
 80011c8:	f000 ffab 	bl	8002122 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, GPIO_PIN_SET); // Tắt đè
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d2:	4802      	ldr	r0, [pc, #8]	; (80011dc <setup1+0x2c>)
 80011d4:	f000 ffa5 	bl	8002122 <HAL_GPIO_WritePin>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40010800 	.word	0x40010800

080011e0 <init1>:
void init1()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, GPIO_PIN_RESET);   // Tắt đèn đỏ Lane 1
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <init1+0x2c>)
 80011ec:	f000 ff99 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, GPIO_PIN_RESET); // Tắt đèn xanh Lane 1
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <init1+0x2c>)
 80011f8:	f000 ff93 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, GPIO_PIN_RESET); // Tắt đè
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <init1+0x2c>)
 8001204:	f000 ff8d 	bl	8002122 <HAL_GPIO_WritePin>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010800 	.word	0x40010800

08001210 <init2>:
void init2()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, GPIO_PIN_RESET);   // Tắt đèn đỏ Lane 1
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <init2+0x2c>)
 800121c:	f000 ff81 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, GPIO_PIN_RESET); // Tắt đèn xanh Lane 1
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <init2+0x2c>)
 8001228:	f000 ff7b 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, GPIO_PIN_RESET); // Tắt đè
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001232:	4802      	ldr	r0, [pc, #8]	; (800123c <init2+0x2c>)
 8001234:	f000 ff75 	bl	8002122 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40010800 	.word	0x40010800

08001240 <setup2>:

void setup2()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, GPIO_PIN_SET);   // Tắt đèn đỏ Lane 2
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <setup2+0x2c>)
 800124c:	f000 ff69 	bl	8002122 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, GPIO_PIN_SET); // Tắt đèn xanh Lane 2
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <setup2+0x2c>)
 8001258:	f000 ff63 	bl	8002122 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, GPIO_PIN_SET); // Tắt đèn vàng Lane 2
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <setup2+0x2c>)
 8001264:	f000 ff5d 	bl	8002122 <HAL_GPIO_WritePin>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010800 	.word	0x40010800

08001270 <red_led1>:
void red_led1() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, RESET);   // Bật đèn đỏ Lane 1
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <red_led1+0x2c>)
 800127c:	f000 ff51 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET); // Tắt đèn xanh Lane 1
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <red_led1+0x2c>)
 8001288:	f000 ff4b 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET); // Tắt đèn vàng Lane 1
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001292:	4802      	ldr	r0, [pc, #8]	; (800129c <red_led1+0x2c>)
 8001294:	f000 ff45 	bl	8002122 <HAL_GPIO_WritePin>

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40010800 	.word	0x40010800

080012a0 <green_led1>:

void green_led1() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);     // Tắt đèn đỏ Lane 1
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <green_led1+0x2c>)
 80012ac:	f000 ff39 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, RESET); // Bật đèn xanh Lane 1
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <green_led1+0x2c>)
 80012b8:	f000 ff33 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET); // Tắt đèn vàng Lane 1
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <green_led1+0x2c>)
 80012c4:	f000 ff2d 	bl	8002122 <HAL_GPIO_WritePin>

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010800 	.word	0x40010800

080012d0 <yellow_led1>:

void yellow_led1() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);     // Tắt đèn đỏ Lane 1
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <yellow_led1+0x2c>)
 80012dc:	f000 ff21 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET); // Tắt đèn xanh Lane 1
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <yellow_led1+0x2c>)
 80012e8:	f000 ff1b 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, RESET); // Bật đèn vàng Lane 1
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	4802      	ldr	r0, [pc, #8]	; (80012fc <yellow_led1+0x2c>)
 80012f4:	f000 ff15 	bl	8002122 <HAL_GPIO_WritePin>

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40010800 	.word	0x40010800

08001300 <red_led2>:

void red_led2() {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, RESET);   // Bật đèn đỏ Lane 2
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130a:	4808      	ldr	r0, [pc, #32]	; (800132c <red_led2+0x2c>)
 800130c:	f000 ff09 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET); // Tắt đèn xanh Lane 2
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <red_led2+0x2c>)
 8001318:	f000 ff03 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, SET); // Tắt đèn vàng Lane 2
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	4802      	ldr	r0, [pc, #8]	; (800132c <red_led2+0x2c>)
 8001324:	f000 fefd 	bl	8002122 <HAL_GPIO_WritePin>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010800 	.word	0x40010800

08001330 <green_led2>:

void green_led2() {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);     // Tắt đèn đỏ Lane 2
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <green_led2+0x2c>)
 800133c:	f000 fef1 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, RESET); // Bật đèn xanh Lane 2
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <green_led2+0x2c>)
 8001348:	f000 feeb 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, SET); // Tắt đèn vàng Lane 2
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001352:	4802      	ldr	r0, [pc, #8]	; (800135c <green_led2+0x2c>)
 8001354:	f000 fee5 	bl	8002122 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010800 	.word	0x40010800

08001360 <yellow_led2>:

void yellow_led2() {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);     // Tắt đèn đỏ Lane 2
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <yellow_led2+0x2c>)
 800136c:	f000 fed9 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET); // Tắt đèn xanh Lane 2
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <yellow_led2+0x2c>)
 8001378:	f000 fed3 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, RESET); // Bật đèn vàng Lane 2
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <yellow_led2+0x2c>)
 8001384:	f000 fecd 	bl	8002122 <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40010800 	.word	0x40010800

08001390 <toggle_red>:
void toggle_red()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_LED2_GPIO_Port, RED_LED2_Pin);
 8001394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <toggle_red+0x4c>)
 800139a:	f000 feda 	bl	8002152 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(RED_LED1_GPIO_Port, RED_LED1_Pin);
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	480e      	ldr	r0, [pc, #56]	; (80013dc <toggle_red+0x4c>)
 80013a4:	f000 fed5 	bl	8002152 <HAL_GPIO_TogglePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <toggle_red+0x4c>)
 80013b0:	f000 feb7 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ba:	4808      	ldr	r0, [pc, #32]	; (80013dc <toggle_red+0x4c>)
 80013bc:	f000 feb1 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <toggle_red+0x4c>)
 80013c8:	f000 feab 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d2:	4802      	ldr	r0, [pc, #8]	; (80013dc <toggle_red+0x4c>)
 80013d4:	f000 fea5 	bl	8002122 <HAL_GPIO_WritePin>

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40010800 	.word	0x40010800

080013e0 <toggle_yellow>:
void toggle_yellow()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin);
 80013e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <toggle_yellow+0x4c>)
 80013ea:	f000 feb2 	bl	8002152 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin);
 80013ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f2:	480e      	ldr	r0, [pc, #56]	; (800142c <toggle_yellow+0x4c>)
 80013f4:	f000 fead 	bl	8002152 <HAL_GPIO_TogglePin>
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);   // Tắt LED đỏ 1
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <toggle_yellow+0x4c>)
 8001400:	f000 fe8f 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);   // Tắt LED đỏ 2
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <toggle_yellow+0x4c>)
 800140c:	f000 fe89 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET); // Tắt LED xanh 1
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <toggle_yellow+0x4c>)
 8001418:	f000 fe83 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET); // Tắt LED xanh 2
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <toggle_yellow+0x4c>)
 8001424:	f000 fe7d 	bl	8002122 <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40010800 	.word	0x40010800

08001430 <toggle_green>:

void toggle_green()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin); // Đổi trạng thái LED xanh 2
 8001434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <toggle_green+0x4c>)
 800143a:	f000 fe8a 	bl	8002152 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin); // Đổi trạng thái LED xanh 1
 800143e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <toggle_green+0x4c>)
 8001444:	f000 fe85 	bl	8002152 <HAL_GPIO_TogglePin>
    HAL_GPIO_WritePin(YELLOW_LED1_GPIO_Port, YELLOW_LED1_Pin, SET); // Tắt LED vàng 1
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <toggle_green+0x4c>)
 8001450:	f000 fe67 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED2_GPIO_Port, YELLOW_LED2_Pin, SET); // Tắt LED vàng 2
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <toggle_green+0x4c>)
 800145c:	f000 fe61 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET); // Tắt LED đỏ 1
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <toggle_green+0x4c>)
 8001468:	f000 fe5b 	bl	8002122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET); // Tắt LED đỏ 2
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001472:	4802      	ldr	r0, [pc, #8]	; (800147c <toggle_green+0x4c>)
 8001474:	f000 fe55 	bl	8002122 <HAL_GPIO_WritePin>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40010800 	.word	0x40010800

08001480 <main>:
  * @retval int
  */


int main(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001484:	f000 fb4c 	bl	8001b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001488:	f000 f81e 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800148c:	f000 f858 	bl	8001540 <MX_TIM2_Init>
  MX_GPIO_Init();
 8001490:	f000 f8a2 	bl	80015d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <main+0x3c>)
 8001496:	f001 faa1 	bl	80029dc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  SCH_Init();
 800149a:	f000 f911 	bl	80016c0 <SCH_Init>

 // SCH_Add_Task(fsm_manual, DELAY, PERIOD);

              SCH_Add_Task(get3ButtonInput, 0, 10);
 800149e:	220a      	movs	r2, #10
 80014a0:	2100      	movs	r1, #0
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <main+0x40>)
 80014a4:	f000 fa30 	bl	8001908 <SCH_Add_Task>
			  SCH_Add_Task(fsm_manual_run_sch, 0, 1000);
 80014a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ac:	2100      	movs	r1, #0
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <main+0x44>)
 80014b0:	f000 fa2a 	bl	8001908 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 80014b4:	f000 f9c4 	bl	8001840 <SCH_Dispatch_Tasks>
 80014b8:	e7fc      	b.n	80014b4 <main+0x34>
 80014ba:	bf00      	nop
 80014bc:	200000c4 	.word	0x200000c4
 80014c0:	08000b7d 	.word	0x08000b7d
 80014c4:	08000d85 	.word	0x08000d85

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	; 0x40
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	2228      	movs	r2, #40	; 0x28
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fe30 	bl	800313c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f2:	2310      	movs	r3, #16
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fe40 	bl	8002184 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800150a:	f000 f8d3 	bl	80016b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f001 f8ac 	bl	8002684 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001532:	f000 f8bf 	bl	80016b4 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3740      	adds	r7, #64	; 0x40
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_TIM2_Init+0x94>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001566:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800156a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_TIM2_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001574:	2209      	movs	r2, #9
 8001576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_TIM2_Init+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001586:	f001 f9d9 	bl	800293c <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001590:	f000 f890 	bl	80016b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_TIM2_Init+0x94>)
 80015a2:	f001 fb57 	bl	8002c54 <HAL_TIM_ConfigClockSource>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015ac:	f000 f882 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_TIM2_Init+0x94>)
 80015be:	f001 fd2f 	bl	8003020 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015c8:	f000 f874 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000c4 	.word	0x200000c4

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <MX_GPIO_Init+0xbc>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a28      	ldr	r2, [pc, #160]	; (8001694 <MX_GPIO_Init+0xbc>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <MX_GPIO_Init+0xbc>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <MX_GPIO_Init+0xbc>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <MX_GPIO_Init+0xbc>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_GPIO_Init+0xbc>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin
 800161c:	2200      	movs	r2, #0
 800161e:	f64f 411e 	movw	r1, #64542	; 0xfc1e
 8001622:	481d      	ldr	r0, [pc, #116]	; (8001698 <MX_GPIO_Init+0xc0>)
 8001624:	f000 fd7d 	bl	8002122 <HAL_GPIO_WritePin>
                          |RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED2_Pin
                          |GREEN_LED2_Pin|YELLOW_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG3_Pin
 8001628:	2200      	movs	r2, #0
 800162a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800162e:	481b      	ldr	r0, [pc, #108]	; (800169c <MX_GPIO_Init+0xc4>)
 8001630:	f000 fd77 	bl	8002122 <HAL_GPIO_WritePin>
                          |SEG1_Pin|SEG2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_0_Pin EN_1_Pin EN_2_Pin EN_3_Pin
                           RED_LED1_Pin GREEN_LED1_Pin YELLOW_LED1_Pin RED_LED2_Pin
                           GREEN_LED2_Pin YELLOW_LED2_Pin */
  GPIO_InitStruct.Pin = EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin
 8001634:	f64f 431e 	movw	r3, #64542	; 0xfc1e
 8001638:	60bb      	str	r3, [r7, #8]
                          |RED_LED1_Pin|GREEN_LED1_Pin|YELLOW_LED1_Pin|RED_LED2_Pin
                          |GREEN_LED2_Pin|YELLOW_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2302      	movs	r3, #2
 8001644:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	4619      	mov	r1, r3
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <MX_GPIO_Init+0xc0>)
 800164e:	f000 fbd7 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001652:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	4619      	mov	r1, r3
 8001666:	480c      	ldr	r0, [pc, #48]	; (8001698 <MX_GPIO_Init+0xc0>)
 8001668:	f000 fbca 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG0_Pin
                           SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG3_Pin
 800166c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001670:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2302      	movs	r3, #2
 800167c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_GPIO_Init+0xc4>)
 8001686:	f000 fbbb 	bl	8001e00 <HAL_GPIO_Init>

}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40010800 	.word	0x40010800
 800169c:	40010c00 	.word	0x40010c00

080016a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

	SCH_Update();
 80016a8:	f000 f850 	bl	800174c <SCH_Update>


}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	e7fe      	b.n	80016bc <Error_Handler+0x8>
	...

080016c0 <SCH_Init>:
sTask tasks_array[SCH_MAX_TASKS];



// khoi tao ban day cho task
void SCH_Init(void) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i ++) {
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	e033      	b.n	8001734 <SCH_Init+0x74>
        tasks_array[i].pTask = 0;
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	491e      	ldr	r1, [pc, #120]	; (8001748 <SCH_Init+0x88>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
        tasks_array[i].ID = i  ;
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	79f9      	ldrb	r1, [r7, #7]
 80016e2:	4819      	ldr	r0, [pc, #100]	; (8001748 <SCH_Init+0x88>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4403      	add	r3, r0
 80016ee:	3310      	adds	r3, #16
 80016f0:	6019      	str	r1, [r3, #0]
        tasks_array[i].Delay = 0;
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	4914      	ldr	r1, [pc, #80]	; (8001748 <SCH_Init+0x88>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3304      	adds	r3, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
        tasks_array[i].Period = 0;
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	490f      	ldr	r1, [pc, #60]	; (8001748 <SCH_Init+0x88>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	3308      	adds	r3, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
        tasks_array[i].RunMe = 0;
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	490a      	ldr	r1, [pc, #40]	; (8001748 <SCH_Init+0x88>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	330c      	adds	r3, #12
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i ++) {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	3301      	adds	r3, #1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b13      	cmp	r3, #19
 8001738:	d9c8      	bls.n	80016cc <SCH_Init+0xc>
    }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000010c 	.word	0x2000010c

0800174c <SCH_Update>:


void SCH_Update(void) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
    unsigned char Index;

    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e067      	b.n	8001828 <SCH_Update+0xdc>
        if (tasks_array[Index].pTask != 0) {
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	4938      	ldr	r1, [pc, #224]	; (800183c <SCH_Update+0xf0>)
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d05a      	beq.n	8001822 <SCH_Update+0xd6>
            if (tasks_array[Index].Delay > 0) {
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	4933      	ldr	r1, [pc, #204]	; (800183c <SCH_Update+0xf0>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d012      	beq.n	80017a8 <SCH_Update+0x5c>
                tasks_array[Index].Delay -= 1;
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	492d      	ldr	r1, [pc, #180]	; (800183c <SCH_Update+0xf0>)
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	3304      	adds	r3, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	1e59      	subs	r1, r3, #1
 8001798:	4828      	ldr	r0, [pc, #160]	; (800183c <SCH_Update+0xf0>)
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4403      	add	r3, r0
 80017a4:	3304      	adds	r3, #4
 80017a6:	6019      	str	r1, [r3, #0]
            }
            if (tasks_array[Index].Delay == 0) {
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	4924      	ldr	r1, [pc, #144]	; (800183c <SCH_Update+0xf0>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3304      	adds	r3, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d131      	bne.n	8001822 <SCH_Update+0xd6>
                tasks_array[Index].RunMe += 1;
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	491e      	ldr	r1, [pc, #120]	; (800183c <SCH_Update+0xf0>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	330c      	adds	r3, #12
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	79fa      	ldrb	r2, [r7, #7]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b2d8      	uxtb	r0, r3
 80017d6:	4919      	ldr	r1, [pc, #100]	; (800183c <SCH_Update+0xf0>)
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	330c      	adds	r3, #12
 80017e4:	4602      	mov	r2, r0
 80017e6:	701a      	strb	r2, [r3, #0]
                if (tasks_array[Index].Period > 0) {
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	4914      	ldr	r1, [pc, #80]	; (800183c <SCH_Update+0xf0>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	3308      	adds	r3, #8
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d011      	beq.n	8001822 <SCH_Update+0xd6>
                    tasks_array[Index].Delay = tasks_array[Index].Period;
 80017fe:	79f9      	ldrb	r1, [r7, #7]
 8001800:	79fa      	ldrb	r2, [r7, #7]
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <SCH_Update+0xf0>)
 8001804:	460b      	mov	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4403      	add	r3, r0
 800180e:	3308      	adds	r3, #8
 8001810:	6819      	ldr	r1, [r3, #0]
 8001812:	480a      	ldr	r0, [pc, #40]	; (800183c <SCH_Update+0xf0>)
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4403      	add	r3, r0
 800181e:	3304      	adds	r3, #4
 8001820:	6019      	str	r1, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	3301      	adds	r3, #1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b13      	cmp	r3, #19
 800182c:	d994      	bls.n	8001758 <SCH_Update+0xc>
                }
            }
        }
    }
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000010c 	.word	0x2000010c

08001840 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks() {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
    unsigned char Index;

    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001846:	2300      	movs	r3, #0
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e053      	b.n	80018f4 <SCH_Dispatch_Tasks+0xb4>
        if (tasks_array[Index].RunMe > 0) {
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	492d      	ldr	r1, [pc, #180]	; (8001904 <SCH_Dispatch_Tasks+0xc4>)
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	330c      	adds	r3, #12
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d045      	beq.n	80018ee <SCH_Dispatch_Tasks+0xae>
            (*tasks_array[Index].pTask)();
 8001862:	79fa      	ldrb	r2, [r7, #7]
 8001864:	4927      	ldr	r1, [pc, #156]	; (8001904 <SCH_Dispatch_Tasks+0xc4>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4798      	blx	r3
            tasks_array[Index].RunMe -= 1;
 8001874:	79fa      	ldrb	r2, [r7, #7]
 8001876:	4923      	ldr	r1, [pc, #140]	; (8001904 <SCH_Dispatch_Tasks+0xc4>)
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	330c      	adds	r3, #12
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	3b01      	subs	r3, #1
 800188a:	b2d8      	uxtb	r0, r3
 800188c:	491d      	ldr	r1, [pc, #116]	; (8001904 <SCH_Dispatch_Tasks+0xc4>)
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	330c      	adds	r3, #12
 800189a:	4602      	mov	r2, r0
 800189c:	701a      	strb	r2, [r3, #0]

            if (tasks_array[Index].Period == 0) {
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	4918      	ldr	r1, [pc, #96]	; (8001904 <SCH_Dispatch_Tasks+0xc4>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3308      	adds	r3, #8
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d11c      	bne.n	80018ee <SCH_Dispatch_Tasks+0xae>
                tasks_array[Index].pTask = 0;
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	4913      	ldr	r1, [pc, #76]	; (8001904 <SCH_Dispatch_Tasks+0xc4>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
                tasks_array[Index].Delay = 0;
 80018c6:	79fa      	ldrb	r2, [r7, #7]
 80018c8:	490e      	ldr	r1, [pc, #56]	; (8001904 <SCH_Dispatch_Tasks+0xc4>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3304      	adds	r3, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
                tasks_array[Index].RunMe = 0;
 80018da:	79fa      	ldrb	r2, [r7, #7]
 80018dc:	4909      	ldr	r1, [pc, #36]	; (8001904 <SCH_Dispatch_Tasks+0xc4>)
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	330c      	adds	r3, #12
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	3301      	adds	r3, #1
 80018f2:	71fb      	strb	r3, [r7, #7]
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2b13      	cmp	r3, #19
 80018f8:	d9a8      	bls.n	800184c <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000010c 	.word	0x2000010c

08001908 <SCH_Add_Task>:


unsigned char SCH_Add_Task(void (*pFunction)(void), unsigned int DELAY, unsigned int PERIOD) {
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
    unsigned char Index = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
    while ((Index < SCH_MAX_TASKS) && (tasks_array[Index].pTask != 0)) {
 8001918:	e002      	b.n	8001920 <SCH_Add_Task+0x18>
        Index++;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	3301      	adds	r3, #1
 800191e:	75fb      	strb	r3, [r7, #23]
    while ((Index < SCH_MAX_TASKS) && (tasks_array[Index].pTask != 0)) {
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b13      	cmp	r3, #19
 8001924:	d809      	bhi.n	800193a <SCH_Add_Task+0x32>
 8001926:	7dfa      	ldrb	r2, [r7, #23]
 8001928:	4920      	ldr	r1, [pc, #128]	; (80019ac <SCH_Add_Task+0xa4>)
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ef      	bne.n	800191a <SCH_Add_Task+0x12>
    }


    if (Index == SCH_MAX_TASKS) {
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b14      	cmp	r3, #20
 800193e:	d104      	bne.n	800194a <SCH_Add_Task+0x42>
        Error_code_G  =  ERROR_SCH_TOO_MANY_TASKS;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <SCH_Add_Task+0xa8>)
 8001942:	2215      	movs	r2, #21
 8001944:	701a      	strb	r2, [r3, #0]
        return SCH_MAX_TASKS;
 8001946:	2314      	movs	r3, #20
 8001948:	e02b      	b.n	80019a2 <SCH_Add_Task+0x9a>
    }


    tasks_array[Index].pTask = pFunction;   // Gán con trỏ hàm
 800194a:	7dfa      	ldrb	r2, [r7, #23]
 800194c:	4917      	ldr	r1, [pc, #92]	; (80019ac <SCH_Add_Task+0xa4>)
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]
    tasks_array[Index].Delay = DELAY;       // Gán thời gian chờ ban đầu
 800195c:	7dfa      	ldrb	r2, [r7, #23]
 800195e:	4913      	ldr	r1, [pc, #76]	; (80019ac <SCH_Add_Task+0xa4>)
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	3304      	adds	r3, #4
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	601a      	str	r2, [r3, #0]
    tasks_array[Index].Period = PERIOD/SCH_STICK;     // Gán chu kỳ (nếu có)
 8001970:	7dfa      	ldrb	r2, [r7, #23]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	490f      	ldr	r1, [pc, #60]	; (80019b4 <SCH_Add_Task+0xac>)
 8001976:	fba1 1303 	umull	r1, r3, r1, r3
 800197a:	08d9      	lsrs	r1, r3, #3
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <SCH_Add_Task+0xa4>)
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4403      	add	r3, r0
 8001988:	3308      	adds	r3, #8
 800198a:	6019      	str	r1, [r3, #0]
    tasks_array[Index].RunMe = 0;           // Đặt cờ 'RunMe' ban đầu
 800198c:	7dfa      	ldrb	r2, [r7, #23]
 800198e:	4907      	ldr	r1, [pc, #28]	; (80019ac <SCH_Add_Task+0xa4>)
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	330c      	adds	r3, #12
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]


    return Index;
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	2000010c 	.word	0x2000010c
 80019b0:	200000b8 	.word	0x200000b8
 80019b4:	cccccccd 	.word	0xcccccccd

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_MspInit+0x5c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_MspInit+0x5c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6193      	str	r3, [r2, #24]
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_MspInit+0x5c>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_MspInit+0x5c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_MspInit+0x5c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_MspInit+0x5c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_MspInit+0x60>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_MspInit+0x60>)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2c:	d113      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_TIM_Base_MspInit+0x44>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_TIM_Base_MspInit+0x44>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_TIM_Base_MspInit+0x44>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	201c      	movs	r0, #28
 8001a4c:	f000 f9a1 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a50:	201c      	movs	r0, #28
 8001a52:	f000 f9ba 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aaa:	f000 f87f 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM2_IRQHandler+0x10>)
 8001aba:	f000 ffdb 	bl	8002a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000c4 	.word	0x200000c4

08001ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad4:	f7ff fff8 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ada:	490c      	ldr	r1, [pc, #48]	; (8001b0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af0:	4c09      	ldr	r4, [pc, #36]	; (8001b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afe:	f001 faf9 	bl	80030f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b02:	f7ff fcbd 	bl	8001480 <main>
  bx lr
 8001b06:	4770      	bx	lr
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b10:	08003190 	.word	0x08003190
  ldr r2, =_sbss
 8001b14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b18:	200002a0 	.word	0x200002a0

08001b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC1_2_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x28>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x28>)
 8001b2a:	f043 0310 	orr.w	r3, r3, #16
 8001b2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f923 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	200f      	movs	r0, #15
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff ff3c 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40022000 	.word	0x40022000

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f93b 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f000 f903 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000068 	.word	0x20000068
 8001ba4:	20000070 	.word	0x20000070
 8001ba8:	2000006c 	.word	0x2000006c

08001bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_IncTick+0x1c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <HAL_IncTick+0x20>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000070 	.word	0x20000070
 8001bcc:	2000029c 	.word	0x2000029c

08001bd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <HAL_GetTick+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	2000029c 	.word	0x2000029c

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4906      	ldr	r1, [pc, #24]	; (8001c7c <__NVIC_EnableIRQ+0x34>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	; (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff90 	bl	8001c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff2d 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff42 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff90 	bl	8001cd4 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5f 	bl	8001c80 <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff35 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b08b      	sub	sp, #44	; 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	e148      	b.n	80020a6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e14:	2201      	movs	r2, #1
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8137 	bne.w	80020a0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4aa3      	ldr	r2, [pc, #652]	; (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d05e      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e3c:	4aa1      	ldr	r2, [pc, #644]	; (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d875      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e42:	4aa1      	ldr	r2, [pc, #644]	; (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d058      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e48:	4a9f      	ldr	r2, [pc, #636]	; (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d86f      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e4e:	4a9f      	ldr	r2, [pc, #636]	; (80020cc <HAL_GPIO_Init+0x2cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d052      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e54:	4a9d      	ldr	r2, [pc, #628]	; (80020cc <HAL_GPIO_Init+0x2cc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d869      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e5a:	4a9d      	ldr	r2, [pc, #628]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d04c      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e60:	4a9b      	ldr	r2, [pc, #620]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d863      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e66:	4a9b      	ldr	r2, [pc, #620]	; (80020d4 <HAL_GPIO_Init+0x2d4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d046      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e6c:	4a99      	ldr	r2, [pc, #612]	; (80020d4 <HAL_GPIO_Init+0x2d4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d85d      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d82a      	bhi.n	8001ecc <HAL_GPIO_Init+0xcc>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d859      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e7a:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <HAL_GPIO_Init+0x80>)
 8001e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e80:	08001efb 	.word	0x08001efb
 8001e84:	08001ed5 	.word	0x08001ed5
 8001e88:	08001ee7 	.word	0x08001ee7
 8001e8c:	08001f29 	.word	0x08001f29
 8001e90:	08001f2f 	.word	0x08001f2f
 8001e94:	08001f2f 	.word	0x08001f2f
 8001e98:	08001f2f 	.word	0x08001f2f
 8001e9c:	08001f2f 	.word	0x08001f2f
 8001ea0:	08001f2f 	.word	0x08001f2f
 8001ea4:	08001f2f 	.word	0x08001f2f
 8001ea8:	08001f2f 	.word	0x08001f2f
 8001eac:	08001f2f 	.word	0x08001f2f
 8001eb0:	08001f2f 	.word	0x08001f2f
 8001eb4:	08001f2f 	.word	0x08001f2f
 8001eb8:	08001f2f 	.word	0x08001f2f
 8001ebc:	08001f2f 	.word	0x08001f2f
 8001ec0:	08001f2f 	.word	0x08001f2f
 8001ec4:	08001edd 	.word	0x08001edd
 8001ec8:	08001ef1 	.word	0x08001ef1
 8001ecc:	4a82      	ldr	r2, [pc, #520]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed2:	e02c      	b.n	8001f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e029      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e024      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	3308      	adds	r3, #8
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e01f      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e01a      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f02:	2304      	movs	r3, #4
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e013      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f10:	2308      	movs	r3, #8
 8001f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	611a      	str	r2, [r3, #16]
          break;
 8001f1a:	e009      	b.n	8001f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	615a      	str	r2, [r3, #20]
          break;
 8001f26:	e003      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          break;
 8001f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	; 0xff
 8001f34:	d801      	bhi.n	8001f3a <HAL_GPIO_Init+0x13a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	e001      	b.n	8001f3e <HAL_GPIO_Init+0x13e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d802      	bhi.n	8001f4c <HAL_GPIO_Init+0x14c>
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x152>
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	3b08      	subs	r3, #8
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	210f      	movs	r1, #15
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	6a39      	ldr	r1, [r7, #32]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8090 	beq.w	80020a0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f80:	4b56      	ldr	r3, [pc, #344]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a55      	ldr	r2, [pc, #340]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f98:	4a51      	ldr	r2, [pc, #324]	; (80020e0 <HAL_GPIO_Init+0x2e0>)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a49      	ldr	r2, [pc, #292]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_GPIO_Init+0x1e0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <HAL_GPIO_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a47      	ldr	r2, [pc, #284]	; (80020ec <HAL_GPIO_Init+0x2ec>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_GPIO_Init+0x1d8>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e004      	b.n	8001fe2 <HAL_GPIO_Init+0x1e2>
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e002      	b.n	8001fe2 <HAL_GPIO_Init+0x1e2>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_GPIO_Init+0x1e2>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe4:	f002 0203 	and.w	r2, r2, #3
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	4093      	lsls	r3, r2
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff2:	493b      	ldr	r1, [pc, #236]	; (80020e0 <HAL_GPIO_Init+0x2e0>)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800200c:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4937      	ldr	r1, [pc, #220]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800201a:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4933      	ldr	r1, [pc, #204]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002024:	4013      	ands	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002034:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	492d      	ldr	r1, [pc, #180]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4929      	ldr	r1, [pc, #164]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800204c:	4013      	ands	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4923      	ldr	r1, [pc, #140]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	491f      	ldr	r1, [pc, #124]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002074:	4013      	ands	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4919      	ldr	r1, [pc, #100]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	4915      	ldr	r1, [pc, #84]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800209c:	4013      	ands	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3301      	adds	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f47f aeaf 	bne.w	8001e14 <HAL_GPIO_Init+0x14>
  }
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	372c      	adds	r7, #44	; 0x2c
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	10320000 	.word	0x10320000
 80020c8:	10310000 	.word	0x10310000
 80020cc:	10220000 	.word	0x10220000
 80020d0:	10210000 	.word	0x10210000
 80020d4:	10120000 	.word	0x10120000
 80020d8:	10110000 	.word	0x10110000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000
 80020e4:	40010800 	.word	0x40010800
 80020e8:	40010c00 	.word	0x40010c00
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	807b      	strh	r3, [r7, #2]
 800212e:	4613      	mov	r3, r2
 8002130:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002132:	787b      	ldrb	r3, [r7, #1]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002138:	887a      	ldrh	r2, [r7, #2]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800213e:	e003      	b.n	8002148 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	041a      	lsls	r2, r3, #16
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	041a      	lsls	r2, r3, #16
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43d9      	mvns	r1, r3
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	400b      	ands	r3, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	611a      	str	r2, [r3, #16]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e26c      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d00c      	beq.n	80021ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b0:	4b8f      	ldr	r3, [pc, #572]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d112      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
 80021bc:	4b8c      	ldr	r3, [pc, #560]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d06c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x12c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d168      	bne.n	80022b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e246      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x76>
 80021ec:	4b80      	ldr	r3, [pc, #512]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7f      	ldr	r2, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	e02e      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a77      	ldr	r2, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0xbc>
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a71      	ldr	r2, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 8002240:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fcb6 	bl	8001bd0 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fcb2 	bl	8001bd0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1fa      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xe4>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fca2 	bl	8001bd0 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fc9e 	bl	8001bd0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1e6      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x10c>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ca:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1ba      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4939      	ldr	r1, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff fc57 	bl	8001bd0 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7ff fc53 	bl	8001bd0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e19b      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4927      	ldr	r1, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff fc36 	bl	8001bd0 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7ff fc32 	bl	8001bd0 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e17a      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03a      	beq.n	8002408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7ff fc16 	bl	8001bd0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7ff fc12 	bl	8001bd0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e15a      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 fa9a 	bl	8002900 <RCC_Delay>
 80023cc:	e01c      	b.n	8002408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7ff fbfc 	bl	8001bd0 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	e00f      	b.n	80023fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff fbf8 	bl	8001bd0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d908      	bls.n	80023fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e140      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	42420000 	.word	0x42420000
 80023f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b9e      	ldr	r3, [pc, #632]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e9      	bne.n	80023dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a6 	beq.w	8002562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b97      	ldr	r3, [pc, #604]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b94      	ldr	r3, [pc, #592]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a93      	ldr	r2, [pc, #588]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b91      	ldr	r3, [pc, #580]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002442:	4b8e      	ldr	r3, [pc, #568]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244e:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a8a      	ldr	r2, [pc, #552]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7ff fbb9 	bl	8001bd0 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7ff fbb5 	bl	8001bd0 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b64      	cmp	r3, #100	; 0x64
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0fd      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b81      	ldr	r3, [pc, #516]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x312>
 8002488:	4b7b      	ldr	r3, [pc, #492]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a7a      	ldr	r2, [pc, #488]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x334>
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a75      	ldr	r2, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b73      	ldr	r3, [pc, #460]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a72      	ldr	r2, [pc, #456]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	e01c      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d10c      	bne.n	80024da <HAL_RCC_OscConfig+0x356>
 80024c0:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6c      	ldr	r2, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a66      	ldr	r2, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b64      	ldr	r3, [pc, #400]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a63      	ldr	r2, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7ff fb69 	bl	8001bd0 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7ff fb65 	bl	8001bd0 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0ab      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ee      	beq.n	8002502 <HAL_RCC_OscConfig+0x37e>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7ff fb53 	bl	8001bd0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7ff fb4f 	bl	8001bd0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e095      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b48      	ldr	r3, [pc, #288]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a47      	ldr	r2, [pc, #284]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8081 	beq.w	800266e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d061      	beq.n	800263c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d146      	bne.n	800260e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7ff fb23 	bl	8001bd0 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7ff fb1f 	bl	8001bd0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e067      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	492d      	ldr	r1, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a19      	ldr	r1, [r3, #32]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	430b      	orrs	r3, r1
 80025da:	4927      	ldr	r1, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7ff faf3 	bl	8001bd0 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ee:	f7ff faef 	bl	8001bd0 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e037      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x46a>
 800260c:	e02f      	b.n	800266e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff fadc 	bl	8001bd0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7ff fad8 	bl	8001bd0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e020      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x498>
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e013      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
 8002680:	42420060 	.word	0x42420060

08002684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d0      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d910      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4965      	ldr	r1, [pc, #404]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a52      	ldr	r2, [pc, #328]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	494d      	ldr	r1, [pc, #308]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d040      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d115      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07f      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e073      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06b      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4936      	ldr	r1, [pc, #216]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7ff fa2c 	bl	8001bd0 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7ff fa28 	bl	8001bd0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e053      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d210      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4922      	ldr	r1, [pc, #136]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e032      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4916      	ldr	r1, [pc, #88]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490e      	ldr	r1, [pc, #56]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002812:	f000 f821 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490a      	ldr	r1, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1cc>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1d0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff f98a 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40022000 	.word	0x40022000
 8002848:	40021000 	.word	0x40021000
 800284c:	08003164 	.word	0x08003164
 8002850:	20000068 	.word	0x20000068
 8002854:	2000006c 	.word	0x2000006c

08002858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b04      	cmp	r3, #4
 8002880:	d002      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x30>
 8002882:	2b08      	cmp	r3, #8
 8002884:	d003      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x36>
 8002886:	e027      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	e027      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	0c9b      	lsrs	r3, r3, #18
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCC_GetSysClockFreq+0x94>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0c5b      	lsrs	r3, r3, #17
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ba:	fb02 f203 	mul.w	r2, r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e004      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	613b      	str	r3, [r7, #16]
      break;
 80028d6:	e002      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028da:	613b      	str	r3, [r7, #16]
      break;
 80028dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028de:	693b      	ldr	r3, [r7, #16]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	08003174 	.word	0x08003174
 80028f8:	08003184 	.word	0x08003184
 80028fc:	003d0900 	.word	0x003d0900

08002900 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <RCC_Delay+0x34>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <RCC_Delay+0x38>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0a5b      	lsrs	r3, r3, #9
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800291c:	bf00      	nop
  }
  while (Delay --);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	60fa      	str	r2, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f9      	bne.n	800291c <RCC_Delay+0x1c>
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000068 	.word	0x20000068
 8002938:	10624dd3 	.word	0x10624dd3

0800293c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e041      	b.n	80029d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff f85a 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f000 fa56 	bl	8002e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d001      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e035      	b.n	8002a60 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_TIM_Base_Start_IT+0x90>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_TIM_Base_Start_IT+0x4e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d004      	beq.n	8002a2a <HAL_TIM_Base_Start_IT+0x4e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <HAL_TIM_Base_Start_IT+0x94>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d111      	bne.n	8002a4e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d010      	beq.n	8002a5e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4c:	e007      	b.n	8002a5e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400

08002a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d020      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01b      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0202 	mvn.w	r2, #2
 8002aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f998 	bl	8002df4 <HAL_TIM_IC_CaptureCallback>
 8002ac4:	e005      	b.n	8002ad2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f98b 	bl	8002de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f99a 	bl	8002e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d020      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01b      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0204 	mvn.w	r2, #4
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f972 	bl	8002df4 <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f965 	bl	8002de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f974 	bl	8002e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d020      	beq.n	8002b70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0208 	mvn.w	r2, #8
 8002b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2204      	movs	r2, #4
 8002b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f94c 	bl	8002df4 <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f93f 	bl	8002de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f94e 	bl	8002e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d020      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0210 	mvn.w	r2, #16
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2208      	movs	r2, #8
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f926 	bl	8002df4 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f919 	bl	8002de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f928 	bl	8002e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0201 	mvn.w	r2, #1
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fd60 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa6f 	bl	80030e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00c      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f8f8 	bl	8002e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0220 	mvn.w	r2, #32
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa42 	bl	80030d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIM_ConfigClockSource+0x1c>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e0b4      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x186>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca8:	d03e      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0xd4>
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	f200 8087 	bhi.w	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	f000 8086 	beq.w	8002dc6 <HAL_TIM_ConfigClockSource+0x172>
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	d87f      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b70      	cmp	r3, #112	; 0x70
 8002cc2:	d01a      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0xa6>
 8002cc4:	2b70      	cmp	r3, #112	; 0x70
 8002cc6:	d87b      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b60      	cmp	r3, #96	; 0x60
 8002cca:	d050      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x11a>
 8002ccc:	2b60      	cmp	r3, #96	; 0x60
 8002cce:	d877      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b50      	cmp	r3, #80	; 0x50
 8002cd2:	d03c      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0xfa>
 8002cd4:	2b50      	cmp	r3, #80	; 0x50
 8002cd6:	d873      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d058      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x13a>
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d86f      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b30      	cmp	r3, #48	; 0x30
 8002ce2:	d064      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x15a>
 8002ce4:	2b30      	cmp	r3, #48	; 0x30
 8002ce6:	d86b      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d060      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x15a>
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d867      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05c      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x15a>
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d05a      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x15a>
 8002cf8:	e062      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f000 f96a 	bl	8002fe2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	609a      	str	r2, [r3, #8]
      break;
 8002d26:	e04f      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6899      	ldr	r1, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f000 f953 	bl	8002fe2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4a:	609a      	str	r2, [r3, #8]
      break;
 8002d4c:	e03c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f000 f8ca 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2150      	movs	r1, #80	; 0x50
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f921 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d6c:	e02c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f000 f8e8 	bl	8002f50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2160      	movs	r1, #96	; 0x60
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f911 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d8c:	e01c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f000 f8aa 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2140      	movs	r1, #64	; 0x40
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f901 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002dac:	e00c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f000 f8f8 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002dbe:	e003      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc4:	e000      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
	...

08002e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <TIM_Base_SetConfig+0xc0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d007      	beq.n	8002e54 <TIM_Base_SetConfig+0x28>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0x28>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <TIM_Base_SetConfig+0xc4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a20      	ldr	r2, [pc, #128]	; (8002eec <TIM_Base_SetConfig+0xc0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <TIM_Base_SetConfig+0x52>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d003      	beq.n	8002e7e <TIM_Base_SetConfig+0x52>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <TIM_Base_SetConfig+0xc4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <TIM_Base_SetConfig+0xc0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d103      	bne.n	8002ec4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f023 0201 	bic.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400

08002ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f023 0201 	bic.w	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 030a 	bic.w	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	621a      	str	r2, [r3, #32]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0210 	bic.w	r2, r3, #16
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	031b      	lsls	r3, r3, #12
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f043 0307 	orr.w	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b087      	sub	sp, #28
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	431a      	orrs	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	609a      	str	r2, [r3, #8]
}
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e041      	b.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d004      	beq.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a10      	ldr	r2, [pc, #64]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400

080030d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <__libc_init_array>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	2600      	movs	r6, #0
 80030f8:	4d0c      	ldr	r5, [pc, #48]	; (800312c <__libc_init_array+0x38>)
 80030fa:	4c0d      	ldr	r4, [pc, #52]	; (8003130 <__libc_init_array+0x3c>)
 80030fc:	1b64      	subs	r4, r4, r5
 80030fe:	10a4      	asrs	r4, r4, #2
 8003100:	42a6      	cmp	r6, r4
 8003102:	d109      	bne.n	8003118 <__libc_init_array+0x24>
 8003104:	f000 f822 	bl	800314c <_init>
 8003108:	2600      	movs	r6, #0
 800310a:	4d0a      	ldr	r5, [pc, #40]	; (8003134 <__libc_init_array+0x40>)
 800310c:	4c0a      	ldr	r4, [pc, #40]	; (8003138 <__libc_init_array+0x44>)
 800310e:	1b64      	subs	r4, r4, r5
 8003110:	10a4      	asrs	r4, r4, #2
 8003112:	42a6      	cmp	r6, r4
 8003114:	d105      	bne.n	8003122 <__libc_init_array+0x2e>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	f855 3b04 	ldr.w	r3, [r5], #4
 800311c:	4798      	blx	r3
 800311e:	3601      	adds	r6, #1
 8003120:	e7ee      	b.n	8003100 <__libc_init_array+0xc>
 8003122:	f855 3b04 	ldr.w	r3, [r5], #4
 8003126:	4798      	blx	r3
 8003128:	3601      	adds	r6, #1
 800312a:	e7f2      	b.n	8003112 <__libc_init_array+0x1e>
 800312c:	08003188 	.word	0x08003188
 8003130:	08003188 	.word	0x08003188
 8003134:	08003188 	.word	0x08003188
 8003138:	0800318c 	.word	0x0800318c

0800313c <memset>:
 800313c:	4603      	mov	r3, r0
 800313e:	4402      	add	r2, r0
 8003140:	4293      	cmp	r3, r2
 8003142:	d100      	bne.n	8003146 <memset+0xa>
 8003144:	4770      	bx	lr
 8003146:	f803 1b01 	strb.w	r1, [r3], #1
 800314a:	e7f9      	b.n	8003140 <memset+0x4>

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
